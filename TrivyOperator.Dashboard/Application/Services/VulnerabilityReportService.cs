namespace TrivyOperator.Dashboard.Application.Services
{
    using Microsoft.Extensions.Caching.Memory;
    using TrivyOperator.Dashboard.Application.Models;
    using TrivyOperator.Dashboard.Application.Services.Abstractions;
    using TrivyOperator.Dashboard.Domain.Services.Abstractions;
    using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;

    public class VulnerabilityReportService : IVulnerabilityReportService
    {

        private IVulnerabilityReportDomainService vulnerabilityReportDomainService { get; set; }
        private IMemoryCache memoryCache { get; set; }

        public VulnerabilityReportService(IVulnerabilityReportDomainService vulnerabilityReportDomainService, IMemoryCache memoryCache)
        {
            this.vulnerabilityReportDomainService = vulnerabilityReportDomainService;
            this.memoryCache = memoryCache;
        }


        public async Task<List<VulnerabilityDto>> GetTrivyVulnerabilities()
        {
            List<VulnerabilityDto> vulnerabilityReports;
            
            if (memoryCache.TryGetValue("trivyVulnerabilities", out vulnerabilityReports))
            {
                return vulnerabilityReports;
            }
            else
            {
                vulnerabilityReports = await GetTrivyVulnerabilityDtos(await vulnerabilityReportDomainService.GetTrivyVulnerabilities());

                memoryCache.Set("trivyVulnerabilities", vulnerabilityReports);

                return vulnerabilityReports;
            }
        }

        public async Task<List<VulnerabilityDto>> GetTrivyVulnerabilities(string namespaceName)
        {
            return await GetTrivyVulnerabilityDtos(await vulnerabilityReportDomainService.GetTrivyVulnerabilities(namespaceName));
        }

        private async Task<List<VulnerabilityDto>> GetTrivyVulnerabilityDtos(List<VulnerabilityReportCR> vulnerabilityReportCRs)
        {
            List<VulnerabilityDto> dtos = new();

            foreach (VulnerabilityReportCR vulnerabilityReportCR in vulnerabilityReportCRs)
            {
                dtos.AddRange(vulnerabilityReportCR.ToVulnerabilityDtos());
            }

            return dtos;
        }
    }
}
