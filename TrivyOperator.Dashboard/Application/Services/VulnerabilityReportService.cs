namespace TrivyOperator.Dashboard.Application.Services
{
    using k8s;
    using k8s.Models;
    using TrivyOperator.Dashboard.Application.Models;
    using TrivyOperator.Dashboard.Application.Services.Abstractions;
    using TrivyOperator.Dashboard.Domain.Trivy.CustomResources.Abstractions;
    using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
    using TrivyOperator.Dashboard.Infrastructure.Abstractions;

    public class VulnerabilityReportService : IVulnerabilityReportService
    {

        private Kubernetes k8sClient { get; set; }

        public VulnerabilityReportService(IK8sClientFactory k8sClientFactory)
        {
            k8sClient = k8sClientFactory.GetClient();
        }


        public async Task<List<VulnerabilityDto>> GetTrivyVulnerabilities()
        {
            V1NamespaceList namespaceList = await k8sClient.CoreV1.ListNamespaceAsync();
            List<VulnerabilityDto> vulnerabilities = new List<VulnerabilityDto>();

            foreach (V1Namespace item in namespaceList.Items)
            {
                string namespaceName = item.Metadata.Name;
                vulnerabilities.AddRange(await GetTrivyVulnerabilities(namespaceName));
            }

            return vulnerabilities;
        }

        public async Task<List<VulnerabilityDto>> GetTrivyVulnerabilities(string namespaceName)
        {
            VulnerabilityReportCRD myCRD = new();

            CustomResourceList<VulnerabilityReportCR> response =
                await k8sClient
                .CustomObjects
                .ListNamespacedCustomObjectAsync<CustomResourceList<VulnerabilityReportCR>>
                (myCRD.Group, myCRD.Version, namespaceName, myCRD.PluralName).ConfigureAwait(false);

            List<VulnerabilityDto> dtos = new();

            foreach (VulnerabilityReportCR vulnerabilityReportCR in response.Items)
            {
                dtos.AddRange(vulnerabilityReportCR.ToVulnerabilityDtos());
            }

            return dtos;
        }
    }
}
