using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;

namespace TrivyOperator.Dashboard.Application.Services;

public class VulnerabilityReportService(IConcurrentCache<string, List<VulnerabilityReportCR>> cache)
    : IVulnerabilityReportService
{
    public async Task<List<VulnerabilityDto>> GetTrivyVulnerabilities()
    {
        List<VulnerabilityReportCR> allVulnerabilities = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out List<VulnerabilityReportCR>? vulnerabilities))
            {
                allVulnerabilities.AddRange(vulnerabilities);
            }
        }

        return GetTrivyVulnerabilityDtos(allVulnerabilities);
    }

    public async Task<List<VulnerabilityDto>> GetTrivyVulnerabilities(string namespaceName)
    {
        if (cache.TryGetValue(namespaceName, out List<VulnerabilityReportCR>? vulnerabilities))
        {
            return GetTrivyVulnerabilityDtos(vulnerabilities);
        }

        return [];
    }

    private static List<VulnerabilityDto> GetTrivyVulnerabilityDtos(
        List<VulnerabilityReportCR> vulnerabilityReportCRs)
    {
        List<VulnerabilityDto> dtos = [];
        foreach (VulnerabilityReportCR vulnerabilityReportCR in vulnerabilityReportCRs)
        {
            dtos.AddRange(vulnerabilityReportCR.ToVulnerabilityDtos());
        }

        return dtos;
    }
}
