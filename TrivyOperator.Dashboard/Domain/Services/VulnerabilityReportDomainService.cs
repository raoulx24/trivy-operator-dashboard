namespace TrivyOperator.Dashboard.Domain.Services
{
    using k8s;
    using k8s.Models;
    using TrivyOperator.Dashboard.Domain.Services.Abstractions;
    using TrivyOperator.Dashboard.Domain.Trivy.CustomResources.Abstractions;
    using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
    using TrivyOperator.Dashboard.Infrastructure.Abstractions;

    public class VulnerabilityReportDomainService : IVulnerabilityReportDomainService
    {
        private Kubernetes k8sClient { get; set; }
        private IKubernetesNamespaceDomainService kubernetesNamespaceDomainService { get; set; }

        public VulnerabilityReportDomainService(IK8sClientFactory k8sClientFactory, IKubernetesNamespaceDomainService kubernetesNamespaceDomainService)
        {
            k8sClient = k8sClientFactory.GetClient();
            this.kubernetesNamespaceDomainService = kubernetesNamespaceDomainService;
        }

        public async Task<List<VulnerabilityReportCR>> GetTrivyVulnerabilities()
        {
            List<string> namespaceNames = await kubernetesNamespaceDomainService.GetKubenetesNamespaces();

            List<VulnerabilityReportCR> vulnerabilities = new();

            foreach (string namespaceName in namespaceNames)
            {
                vulnerabilities.AddRange(await GetTrivyVulnerabilities(namespaceName));
            }

            return vulnerabilities;
        }

        public async Task<List<VulnerabilityReportCR>> GetTrivyVulnerabilities(string namespaceName)
        {
            VulnerabilityReportCRD myCRD = new();

            CustomResourceList<VulnerabilityReportCR> response =
                await k8sClient
                .CustomObjects
                .ListNamespacedCustomObjectAsync<CustomResourceList<VulnerabilityReportCR>>
                (myCRD.Group, myCRD.Version, namespaceName, myCRD.PluralName).ConfigureAwait(false);

            return response?.Items;
        }
    }
}
