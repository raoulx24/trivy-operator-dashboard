import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

import { VulnerabilityReportsService } from '../../../api/services/vulnerability-reports.service';
import { VulnerabilityReportImageDto } from '../../../api/models/vulnerability-report-image-dto';
import { GetVulnerabilityReportImageDtos$Params } from '../../../api/fn/vulnerability-reports/get-vulnerability-report-image-dtos';
import { namespacedColumns } from '../constants/generic.constants';
import { vulnerabilityReportColumns, vulnerabilityReportDetailColumns } from '../constants/vulnerability-reports.constants';

import { GenericMasterDetailComponent } from '../../ui-elements/generic-master-detail/generic-master-detail.component';
import { TrivyFilterData, TrivyTableColumn, TrivyTableExpandRowData } from '../../ui-elements/trivy-table/trivy-table.types';
import { VulnerabilityReportsCompareComponent } from '../../vulnerability-reports-compare/vulnerability-reports-compare.component';
import { TrivyDependencyComponent, ImageInfo } from '../../trivy-dependency/trivy-dependency.component';

import { DialogModule } from 'primeng/dialog';
import { TableModule } from 'primeng/table';
import { SeverityUtils } from '../../utils/severity.utils';


@Component({
  selector: 'app-vulnerability-reports',
  standalone: true,
  imports: [CommonModule, GenericMasterDetailComponent, DialogModule, TableModule, TrivyDependencyComponent, VulnerabilityReportsCompareComponent],
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
})
export class VulnerabilityReportsComponent implements OnInit {
  public dataDtos: VulnerabilityReportImageDto[] = [];
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null = null;
  public activeNamespaces?: string[] = [];

  public mainTableColumns: TrivyTableColumn[] = [... namespacedColumns, ...vulnerabilityReportColumns];
  public mainTableExpandCallbackDto?: VulnerabilityReportImageDto;
  public isMainTableLoading: boolean = true;

  public detailsTableColumns: TrivyTableColumn[] = [...vulnerabilityReportDetailColumns];

  public isImageUsageDialogVisible: boolean = false;
  isVulnerabilityReportsCompareVisible: boolean = false;
  isDependencyTreeViewVisible: boolean = false;

  queryNamespaceName?: string;
  queryDigest?: string;
  isSingleMode: boolean = false;
  singleSelectDataDto?: VulnerabilityReportImageDto;

  trivyImage?: ImageInfo;
  trivyDependencyDialogTitle: string = "";

  constructor(private dataDtoService: VulnerabilityReportsService, private router: Router, private activatedRoute: ActivatedRoute) {
    this.activatedRoute.queryParamMap.subscribe(params => {
      this.queryNamespaceName = params.get('namespaceName') ?? undefined;
      this.queryDigest = params.get('digest') ?? undefined;
    });
    this.isSingleMode = !!(this.queryNamespaceName && this.queryDigest);
  }

  ngOnInit() {
    this.dataDtoService
      //.getVulnerabilityReportImageDtos({ digest: this.queryDigest, namespaceName: this.queryNamespaceName })
      .getVulnerabilityReportImageDtos()
      .subscribe({
        next: (res) => this.onGetDataDtos(res),
        error: (err) => console.error(err),
    });
    this.dataDtoService.getVulnerabilityReportActiveNamespaces().subscribe({
      next: (res) => this.onGetActiveNamespaces(res),
      error: (err) => console.error(err),
    });
  }

  onGetDataDtos(vrDtos: VulnerabilityReportImageDto[]) {
    this.dataDtos = vrDtos;
    if (this.isSingleMode) {
      this.singleSelectDataDto = vrDtos
        .find(x => x.imageDigest == this.queryDigest && x.resourceNamespace == this.queryNamespaceName);
    }
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => (x > y ? 1 : -1));
  }

  onMainTableExpandCallback(dto: VulnerabilityReportImageDto) {
    this.mainTableExpandCallbackDto = dto;
    this.isImageUsageDialogVisible = true;
  }

  public onRefreshRequested(event: TrivyFilterData) {
    const excludedSeverities =
      SeverityUtils.getSeverityIds().filter((severityId) => !event.selectedSeverityIds.includes(severityId)) || [];

    const params: GetVulnerabilityReportImageDtos$Params = {
      namespaceName: event.namespaceName ?? undefined,
      excludedSeverities: excludedSeverities.length > 0 ? excludedSeverities.join(',') : undefined,
    };
    this.isMainTableLoading = true;
    this.dataDtoService.getVulnerabilityReportImageDtos(params).subscribe({
      next: (res) => this.onGetDataDtos(res),
      error: (err) => console.error(err),
    });
  }

  getPanelHeaderText() {
    return `Image Usage for ${this.mainTableExpandCallbackDto?.imageName}:${this.mainTableExpandCallbackDto?.imageTag} in namespace ${this.mainTableExpandCallbackDto?.resourceNamespace}`;
  }

  onMainTableMultiHeaderActionRequested(event: string) {
    switch (event) {
      case "goToDetailedPage":
        this.goToDetailedPage();
        break;
      case "Go to SBOM \u29C9":
        this.goToSbom();
        break;
      case "Compare with...":
        this.isVulnerabilityReportsCompareVisible = true;
        break;
      case "Dependency tree":
        this.goToDependencyTree();
        break;
      default:
        console.error("sbom - multi action call back - unknown: " + event);
    }
  }

  goToSbom() {
    if (this.isSingleMode) {
      return;
    }
    const digest = this.selectedVulnerabilityReportDto?.imageDigest;
    const namespace = this.selectedVulnerabilityReportDto?.resourceNamespace;
    if (digest && namespace) {
      const url = this.router.serializeUrl(
        this.router.createUrlTree(['/sbom-reports'], { queryParams: { namespaceName: namespace, digest: digest } })
      );
      window.open(url, '_blank');
    }
  }

  private goToDetailedPage() {
    const url = this.router.serializeUrl(
      this.router.createUrlTree(['/vulnerability-reports-detailed'])
    );
    window.open(url, '_blank');
  }

  private goToDependencyTree() {
    const digest = this.selectedVulnerabilityReportDto?.imageDigest;
    const namespace = this.selectedVulnerabilityReportDto?.resourceNamespace;
    if (digest && namespace) {
      const imageRepository = this.selectedVulnerabilityReportDto?.imageRepository ?? 'n/a';
      const imageName = this.selectedVulnerabilityReportDto?.imageName ?? 'n/a';
      const imageTag = this.selectedVulnerabilityReportDto?.imageTag ?? 'n/a';
      const imageNamespace = this.selectedVulnerabilityReportDto?.resourceNamespace ?? 'n/a';
      this.trivyDependencyDialogTitle = `Dependency Tree for Image ${imageRepository}/${imageName}:${imageTag} in ${imageNamespace}`;
      this.trivyImage = { digest: digest, namespaceName: namespace };
      this.isDependencyTreeViewVisible = true;
    }
  }

  onMainTableSelectedRowChanged(event: VulnerabilityReportImageDto | null) {
    this.selectedVulnerabilityReportDto = event;
  }


  rowExpandResponse?: TrivyTableExpandRowData<VulnerabilityReportImageDto>;
  onRowExpandChange(dto: VulnerabilityReportImageDto) {
    this.rowExpandResponse = {
      rowKey: dto,
      colStyles: [
        { 'width': '70px', 'min-width': '70px', 'height': '50px' },
        { 'white-space': 'normal', 'display': 'flex', 'align-items': 'center', 'height': '50px' }
      ],
      details: [
        [
          { label: 'Image Digest' },
          { label: dto.imageDigest ?? '' },
        ],
        [
          { label: 'Repository' },
          { label: dto.imageRepository ?? ''},
        ],
        [
          { label: 'Update Moment' },
          { label: '', localTime: dto.updateTimestamp },
        ],
        [
          { label: 'Used By' },
          this.getNarrowedResourceNamesHelper(dto),
        ],
        [
          { label: 'OS Family' },
          {
            label: `${dto.imageOsFamily} - ${dto.imageOsName}`,
            badge: dto.imageEosl ? 'End of Service Life' : undefined,
          },
        ],
      ]
    }
  }

  getNarrowedResourceNamesHelper(dto: VulnerabilityReportImageDto): {label: string; buttonLink: string} {
    const resourceNames: string[] = dto.resources?.map((x) => x.name ?? 'unknown') ?? [];
    let narrowedResourceNames: string = '';
    let narrowedResourceNamesLink: string | undefined = undefined;
    if (resourceNames.length > 2) {
      narrowedResourceNames = resourceNames[0] + ', ' + resourceNames[1];
      narrowedResourceNamesLink = ' [+' + (resourceNames.length - 2) + ']';
    } else {
      narrowedResourceNames = resourceNames.join(', ');
      narrowedResourceNamesLink = '[...]';
    }
    return {
      label: narrowedResourceNames,
      buttonLink: narrowedResourceNamesLink,
    }
  }
}
