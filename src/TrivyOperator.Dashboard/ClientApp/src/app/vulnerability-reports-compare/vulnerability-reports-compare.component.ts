import { Component, OnInit } from '@angular/core';

import { VulnerabilityReportImageDto } from '../../api/models/vulnerability-report-image-dto';
import { VulnerabilityReportDetailDto } from '../../api/models/vulnerability-report-detail-dto';
import { VulnerabilityReportsService } from '../../api/services/vulnerability-reports.service';

import { NamespaceImageSelectorComponent } from '../namespace-image-selector/namespace-image-selector.component';
import { NamespacedImageDto } from '../namespace-image-selector/namespace-image-selector.types';
import { TrivyTableComponent } from '../trivy-table/trivy-table.component';
import { TrivyTableColumn, TrivyTableOptions } from '../trivy-table/trivy-table.types';

type VulnerabilityReportDetailComparedDto = VulnerabilityReportDetailDto & {left: boolean; right: boolean};

@Component({
  selector: 'app-vulnerability-reports-compare',
  imports: [ NamespaceImageSelectorComponent, TrivyTableComponent ],
  templateUrl: './vulnerability-reports-compare.component.html',
  styleUrl: './vulnerability-reports-compare.component.scss'
})
export class VulnerabilityReportsCompareComponent implements OnInit {
  dataDtos?: VulnerabilityReportImageDto[];
  namespacedImageDtos?: NamespacedImageDto[];
  vrDetailsCompared?: VulnerabilityReportDetailComparedDto[];

  comparedTableColumns: TrivyTableColumn[] = [
    {
      field: 'left',
      header: 'Left',
      isFilterable: false,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 90px; max-width: 90px;',
      renderType: 'boolean',
    },
    {
      field: 'right',
      header: 'Right',
      isFilterable: false,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 90px; max-width: 90px;',
      renderType: 'boolean',
    },
    {
      field: 'severityId',
      header: 'Sev',
      isFilterable: true,
      isSortable: true,
      multiSelectType: 'severities',
      style: 'width: 90px; max-width: 90px;',
      renderType: 'severityBadge',
    },
    {
      field: 'resource',
      header: 'Resource',
      isFilterable: true,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 130px; max-width: 130px',
      renderType: 'standard',
    },
    {
      field: 'title',
      header: 'Title',
      isFilterable: true,
      isSortable: false,
      multiSelectType: 'none',
      style: 'min-with: 200px; white-space: normal;',
      renderType: 'standard',
    },
    {
      field: 'installedVersion',
      header: 'Installed Ver',
      isFilterable: true,
      isSortable: false,
      multiSelectType: 'none',
      style: 'width: 120px; max-width: 120px',
      renderType: 'standard',
    },
    {
      field: 'fixedVersion',
      header: 'Fixed Ver',
      isFilterable: true,
      isSortable: false,
      multiSelectType: 'none',
      style: 'width: 120px; max-width: 120px',
      renderType: 'standard',
    },
    {
      field: 'publishedDate',
      header: 'Publish',
      isFilterable: false,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 900px; max-width: 90px',
      renderType: 'date',
    },
    {
      field: 'lastModifiedDate',
      header: 'Modif',
      isFilterable: false,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 90px; max-width: 90px',
      renderType: 'date',
    },
    {
      field: 'score',
      header: 'Score',
      isFilterable: false,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 70px; max-width: 70px',
      renderType: 'standard',
    },
    {
      field: 'vulnerabilityId',
      header: 'CVE',
      isFilterable: true,
      isSortable: true,
      multiSelectType: 'none',
      style: 'width: 150px; max-width: 150px;',
      renderType: 'link',
      extraFields: ['primaryLink'],
    },
  ];
  compareTableOptions: TrivyTableOptions = {
    isClearSelectionVisible: false,
    isExportCsvVisible: false,
    isResetFiltersVisible: true,
    isRefreshVisible: false,
    isRefreshFilterable: false,
    isFooterVisible: false,
    tableSelectionMode: null,
    tableStyle: {},
    stateKey: 'Vulnerability Reports - Compared',
    dataKey: null,
    rowExpansionRender: null,
    extraClasses: 'trivy-with-filters',
  };

  set leftSelectedImageId(value: string | undefined) {
    this._leftSelectedImageId = value;
    this.compareSelectedImagesId();
  }
  set rightSelectedImageId(value: string | undefined) {
    this._rightSelectedImageId = value;
    this.compareSelectedImagesId();
  }

  private _leftSelectedImageId?: string;
  private _rightSelectedImageId?: string;

  constructor(private service: VulnerabilityReportsService) { }

  ngOnInit() {
    this.service
      .getVulnerabilityReportImageDtos()
      .subscribe({
        next: (res) => this.onGetDataDtos(res),
        error: (err) => console.error(err),
      });
  }

  onGetDataDtos(vulnerabilityReportImageDtos: VulnerabilityReportImageDto[]) {
    this.dataDtos = vulnerabilityReportImageDtos;
    this.namespacedImageDtos = vulnerabilityReportImageDtos
      .map(vr => ({
        uid: vr.uid ?? '', resourceNamespace: vr.resourceNamespace ?? '',
        imageName: vr.imageName ?? '', imageTag: vr.imageTag ?? '' }));
  }

  compareSelectedImagesId() {
    if (!this._leftSelectedImageId || !this._rightSelectedImageId) {
      return;
    }

    const detailSet = new Map<string, VulnerabilityReportDetailComparedDto>();

    this.dataDtos
      ?.find(vr => vr.uid === this._leftSelectedImageId)
      ?.details?.forEach(detail => {
        detailSet.set(detail.vulnerabilityId ?? '', { ...detail, left: true, right: false });
      });

    this.dataDtos
      ?.find(vr => vr.uid === this._rightSelectedImageId)
      ?.details?.forEach(detail => {
        if (detailSet.has(detail.vulnerabilityId ?? '')) {
          detailSet.get(detail.vulnerabilityId ?? '')!.right = true; // Mark right if already exists
        } else {
          detailSet.set(detail.vulnerabilityId ?? '', { ...detail, left: false, right: true });
        }});

    this.vrDetailsCompared = Array.from(detailSet.values());
  }
}
