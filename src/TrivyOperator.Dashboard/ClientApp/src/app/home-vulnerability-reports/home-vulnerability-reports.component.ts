import { CommonModule } from '@angular/common';
import { Component, Input } from '@angular/core';
import { FormsModule } from '@angular/forms';

import { VulnerabilityReportSumaryDto } from '../../api/models/vulnerability-report-sumary-dto';
import { VulnerabilityReportsService } from '../../api/services/vulnerability-reports.service';
import { PrimeNgChartUtils, PrimeNgHorizontalBarChartData, SeveritiesSummary } from '../utils/primeng-chart.utils';
import {
  GenericByNsSummaryDto,
  GenericNsTotalSortable,
  GenericSummaryDto,
  OtherSummaryMainStatistics,
  SeveritySummary,
  VrDetailsDto,
} from './home-vulnerability-reports.types';

import { ButtonModule } from 'primeng/button';
import { CarouselModule } from 'primeng/carousel';
import { ChartModule } from 'primeng/chart';
import { DialogModule } from 'primeng/dialog';
import { TableModule } from 'primeng/table';
import { TagModule } from 'primeng/tag';

import { SeverityCssStyleByIdPipe } from '../pipes/severity-css-style-by-id.pipe';
import { SeverityNameByIdPipe } from '../pipes/severity-name-by-id.pipe';
import { VulnerabilityCountPipe } from '../pipes/vulnerability-count.pipe';
import { SeverityUtils } from '../utils/severity.utils';

@Component({
  selector: 'app-home-vulnerability-reports',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ButtonModule,
    CarouselModule,
    ChartModule,
    DialogModule,
    TableModule,
    TagModule,
    SeverityCssStyleByIdPipe,
    SeverityNameByIdPipe,
    VulnerabilityCountPipe,
  ],
  templateUrl: './home-vulnerability-reports.component.html',
  styleUrl: './home-vulnerability-reports.component.scss',
})
export class HomeVulnerabilityReportsComponent {
  vulnerabilityReportSumaryDto?: VulnerabilityReportSumaryDto;
  slides: string[] = ['vrByNs', 'vrBySev'];
  horizontalBarChartDataByNs: PrimeNgHorizontalBarChartData = { labels: [], datasets: [], title: '' };
  horizontalBarChartDataBySeverity: PrimeNgHorizontalBarChartData = { labels: [], datasets: [], title: '' };
  horizontalBarChartOption: any;
  severitiesSummaryForTable: SeveritySummary[] = [];
  othersSummaryForTable: OtherSummaryMainStatistics[] = [];
  isMoreVRDetailsModalVisible: boolean = false;
  moreOthersModalTitle: string = '';
  isMoreOthersModalVisible: boolean = false;
  genericSummaryDtos: GenericSummaryDto[] = [];
  genericByNsSummaryDtos: GenericByNsSummaryDto[] = [];
  vrDetailsReportDtos: VrDetailsDto[] = [];
  vrDetailsReportDtoFooter: VrDetailsDto = { namespaceName: '', isTotal: true, values: [] };
  severityIds: number[] = SeverityUtils.severityDtos.map(x => x.id);
  private localShowDistinctValues: boolean = true;

  constructor(private vulnerabilityReportsService: VulnerabilityReportsService) {
    this.vulnerabilityReportsService.getVulnerabilityReportSumaryDto().subscribe({
      next: (res) => this.onVulnerabilityReportSummaryDtos(res),
      error: (err) => console.error(err),
    });
    this.horizontalBarChartOption = PrimeNgChartUtils.getHorizontalBarChartOption();
  }

  get showDistinctValues(): boolean {
    return this.localShowDistinctValues;
  }

  @Input() set showDistinctValues(value: boolean) {
    this.localShowDistinctValues = value;
    this.onDistinctSwitch();
  }

  onVulnerabilityReportSummaryDtos(vulnerabilityReportSumaryDto?: VulnerabilityReportSumaryDto) {
    this.vulnerabilityReportSumaryDto = vulnerabilityReportSumaryDto;

    if (vulnerabilityReportSumaryDto == null) {
      return;
    }
    this.extractDataForCharts();
    this.extractDataForTables();
  }

  public onOthersMore(element: OtherSummaryMainStatistics) {
    this.moreOthersModalTitle = 'More Info for ' + element.description;
    let tempByNsSummary: GenericByNsSummaryDto[] = [];
    const tempSummary: GenericSummaryDto[] = [];
    switch (element.description) {
      case 'Images':
        tempByNsSummary = this.vulnerabilityReportSumaryDto?.imagesByNSSummaryDtos! as GenericByNsSummaryDto[];
        this.genericByNsSummaryDtos = tempByNsSummary.sort(this.sortOthersByNsSummary);
        this.genericSummaryDtos = this.vulnerabilityReportSumaryDto?.imagesSummaryDtos!.sort((a, b) =>
          a.name! > b.name! ? 1 : -1,
        ) as GenericSummaryDto[];
        break;
      case 'Images OSes':
        tempByNsSummary = this.vulnerabilityReportSumaryDto?.imageOSesByNSSummaryDtos! as GenericByNsSummaryDto[];
        this.genericByNsSummaryDtos = tempByNsSummary.sort(this.sortOthersByNsSummary);
        this.genericSummaryDtos = this.vulnerabilityReportSumaryDto?.imageOSSummaryDtos!.sort((a, b) =>
          a.name! > b.name! ? 1 : -1,
        ) as GenericSummaryDto[];
        break;
      case 'End of Service Life':
        tempByNsSummary = this.vulnerabilityReportSumaryDto?.imageEOSLByNsSummaryDtos! as GenericByNsSummaryDto[];
        this.genericByNsSummaryDtos = tempByNsSummary.sort(this.sortOthersByNsSummary);
        this.genericSummaryDtos = this.vulnerabilityReportSumaryDto?.imageEOSLSummaryDtos!.sort((a, b) =>
          a.name! > b.name! ? 1 : -1,
        ) as GenericSummaryDto[];
        break;
    }
    this.isMoreOthersModalVisible = true;
  }

  public onVrsMore(_event: MouseEvent) {
    this.isMoreVRDetailsModalVisible = true;
  }

  sortOthersByNsSummary = (a: GenericNsTotalSortable, b: GenericNsTotalSortable): number => {
    if (a.isTotal === b.isTotal) {
      return a.namespaceName > b.namespaceName ? 1 : -1;
    }
    return a.isTotal ? 1 : -1;
  };

  getFooterData(fieldName: string): string {
    const dto: GenericByNsSummaryDto = this.genericByNsSummaryDtos.filter((x) => x.isTotal)[0];
    if (!dto) {
      return '';
    }
    switch (fieldName) {
      case 'namespaceName':
        return dto.namespaceName;
      case 'totalCount':
        return dto.totalCount.toString();
      case 'distinctCount':
        return dto.distinctCount.toString();
      default:
        return '';
    }
  }

  onDistinctSwitch() {
    if (this.vulnerabilityReportSumaryDto) {
      this.extractDataForCharts();
      this.extractDataForTables();
    }
  }

  private extractDataForCharts() {
    this.horizontalBarChartDataByNs = PrimeNgChartUtils.getDataForHorizontalBarChartByNamespace(
      this.vulnerabilityReportSumaryDto?.severitiesByNsSummaryDtos as SeveritiesSummary[],
      this.showDistinctValues,
    );
    this.horizontalBarChartDataBySeverity = PrimeNgChartUtils.getDataForHorizontalBarChartBySeverity(
      this.vulnerabilityReportSumaryDto?.severitiesByNsSummaryDtos as SeveritiesSummary[],
      this.showDistinctValues,
    );
  }

  private extractDataForTables() {
    if (this.vulnerabilityReportSumaryDto?.severitiesByNsSummaryDtos) {
      const severitiesTotal = this.vulnerabilityReportSumaryDto.severitiesByNsSummaryDtos.find((x) => x.isTotal);
      if (severitiesTotal) {
        const tableValues: SeveritySummary[] = [];
        severitiesTotal.details
          ?.sort((a, b) => a.id! - b.id!)
          .forEach((x) => {
            tableValues.push({
              severityName: SeverityUtils.getCapitalizedName(x.id!),
              count: this.showDistinctValues ? x.distinctCount! : x.totalCount!,
              fixable: this.showDistinctValues ? x.fixableDistinctCount! : x.fixableTotalCount!,
            });
          });
        this.severitiesSummaryForTable = tableValues;
      }
    }
    this.othersSummaryForTable = [];
    if (this.vulnerabilityReportSumaryDto?.imagesByNSSummaryDtos) {
      const totalData = this.vulnerabilityReportSumaryDto.imagesByNSSummaryDtos.find((x) => x.isTotal);
      if (totalData) {
        this.othersSummaryForTable.push({
          description: 'Images',
          count: this.showDistinctValues ? totalData.distinctCount! : totalData.totalCount!,
        });
      }
    }
    if (this.vulnerabilityReportSumaryDto?.imageOSesByNSSummaryDtos) {
      const totalData = this.vulnerabilityReportSumaryDto.imageOSesByNSSummaryDtos.find((x) => x.isTotal);
      if (totalData) {
        this.othersSummaryForTable.push({
          description: 'Images OSes',
          count: this.showDistinctValues ? totalData.distinctCount! : totalData.totalCount!,
        });
      }
    }
    if (this.vulnerabilityReportSumaryDto?.imageEOSLByNsSummaryDtos) {
      const totalData = this.vulnerabilityReportSumaryDto.imageEOSLByNsSummaryDtos.find((x) => x.isTotal);
      if (totalData) {
        this.othersSummaryForTable.push({
          description: 'End of Service Life',
          count: this.showDistinctValues ? totalData.distinctCount! : totalData.totalCount!,
        });
      }
    }
    if (this.vulnerabilityReportSumaryDto?.severitiesByNsSummaryDtos) {
      const x = this.vulnerabilityReportSumaryDto.severitiesByNsSummaryDtos
        .map(({ namespaceName, details, isTotal }) => {
          const values: { severityId: number, count: number }[] = [];
          this.severityIds.forEach(severityId => {
            const detail = details?.find(det => det.id === severityId);
            values.push({ severityId: severityId, count: this.localShowDistinctValues ? detail?.distinctCount ?? -1 : detail?.totalCount ?? -1 });
            values.push({ severityId: severityId, count: this.localShowDistinctValues ? detail?.fixableDistinctCount ?? -1 : detail?.fixableTotalCount ?? -1 });
          });

          return { namespaceName: namespaceName, values: values, isTotal };
        });
      this.vrDetailsReportDtos = x.filter(x => !x.isTotal)
        .sort((a, b) => {
          return a.namespaceName.localeCompare(b.namespaceName);
        });
      this.vrDetailsReportDtoFooter = x.find(x => x.isTotal) ?? this.vrDetailsReportDtoFooter;
    }
  }
}
