import { Component } from '@angular/core';

import { ClusterVulnerabilityReportDto } from '../../api/models/cluster-vulnerability-report-dto';
import { ClusterVulnerabilityReportService } from '../../api/services/cluster-vulnerability-report.service';
import { GenericMasterDetailComponent } from '../generic-master-detail/generic-master-detail.component';
import { TrivyFilterData, TrivyTableColumn } from '../trivy-table/trivy-table.types';

@Component({
  selector: 'app-cluster-vulnerability-reports',
  standalone: true,
  imports: [GenericMasterDetailComponent],
  templateUrl: './cluster-vulnerability-reports.component.html',
  styleUrl: './cluster-vulnerability-reports.component.scss',
})
export class ClusterVulnerabilityReportsComponent {
  dataDtos: ClusterVulnerabilityReportDto[] = [];

  public mainTableColumns: TrivyTableColumn[] = [];
  public isMainTableLoading: boolean = true;

  public detailsTableColumns: TrivyTableColumn[] = [];

  constructor(private dataDtoService: ClusterVulnerabilityReportService) {
    dataDtoService.getClusterVulnerabilityReportDtos().subscribe({
      next: (res) => this.onGetDataDtos(res),
      error: (err) => console.error(err),
    });

    this.mainTableColumns = [
      {
        field: 'imageName',
        header: 'Image Name - Tag',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'white-space: normal;',
        renderType: 'imageNameTag',
        extraFields: ['imageTag', 'imageEosl'],
      },
      {
        field: 'imageOsFamily',
        header: 'OS Name - Ver',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 265px; max-width: 265px; white-space: normal;',
        renderType: 'imageNameTag',
        extraFields: ['imageOsName'],
      },
      {
        field: 'criticalCount',
        header: 'C',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['0'],
      },
      {
        field: 'highCount',
        header: 'H',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px;',
        renderType: 'severityValue',
        extraFields: ['1'],
      },
      {
        field: 'mediumCount',
        header: 'M',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['2'],
      },
      {
        field: 'lowCount',
        header: 'L',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['3'],
      },
    ];
    this.detailsTableColumns = [
      {
        field: 'severityId',
        header: 'Sev',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'severities',
        style: 'width: 90px; max-width: 90px;',
        renderType: 'severityBadge',
      },
      {
        field: 'resource',
        header: 'Resource',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 130px; max-width: 130px',
        renderType: 'standard',
      },
      {
        field: 'title',
        header: 'Title',
        isFilterable: true,
        isSortable: false,
        multiSelectType: 'none',
        style: 'min-with: 200px; white-space: normal;',
        renderType: 'standard',
      },
      {
        field: 'installedVersion',
        header: 'Installed Ver',
        isFilterable: true,
        isSortable: false,
        multiSelectType: 'none',
        style: 'width: 120px; max-width: 120px',
        renderType: 'standard',
      },
      {
        field: 'fixedVersion',
        header: 'Fixed Ver',
        isFilterable: true,
        isSortable: false,
        multiSelectType: 'none',
        style: 'width: 120px; max-width: 120px',
        renderType: 'standard',
      },
      {
        field: 'publishedDate',
        header: 'Publish',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 900px; max-width: 90px',
        renderType: 'date',
      },
      {
        field: 'lastModifiedDate',
        header: 'Modif',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 90px; max-width: 90px',
        renderType: 'date',
      },
      {
        field: 'score',
        header: 'Score',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 70px; max-width: 70px',
        renderType: 'standard',
      },
      {
        field: 'vulnerabilityId',
        header: 'CVE',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 150px; max-width: 150px;',
        renderType: 'link',
        extraFields: ['primaryLink'],
      },
    ];
  }

  onGetDataDtos(dtos: ClusterVulnerabilityReportDto[]) {
    this.dataDtos = dtos;
  }

  public onRefreshRequested(_event: TrivyFilterData) {
    this.isMainTableLoading = true;
    this.dataDtoService.getClusterVulnerabilityReportDtos().subscribe({
      next: (res) => this.onGetDataDtos(res),
      error: (err) => console.error(err),
    });
  }
}
