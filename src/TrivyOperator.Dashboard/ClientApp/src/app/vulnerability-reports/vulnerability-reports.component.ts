import { Component } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { Column, ExportColumn, TrivyTableColumn, TrivyTableOptions } from "../trivy-table/trivy-table.types";

import { ColDef, GridApi, GridReadyEvent, ValueGetterParams, } from "ag-grid-community";
import { VulnerabilitySeverityRenderer } from "./vulnerability-severity-renderer.component";
import { getVulnerabilityReportImageDtos } from '../../api/fn/vulnerability-reports/get-vulnerability-report-image-dtos';


export type DetailsKeyValue = {
  detailKey: string,
  detailValue: string | null,
}

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
  providers: [SeverityHelperService],
})

export class VulnerabilityReportsComponent {
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;
  public narrowedResourceNames: string | null | undefined;

  public masterTableColumns!: Column[];
  public masterTrivyTableColumns: TrivyTableColumn[] = [];
  public masterTrivyTableOptions: TrivyTableOptions;

  // ag grid
  public masterRowSelection: "single" | "multiple" = "single";
  public slaveColumnDefs: ColDef[] = [
    {
      headerName: '',
      field: "severity",
      filter: true,
      width: 80,
      cellRenderer: VulnerabilitySeverityRenderer
    },
    { headerName: 'resource', field: "resource", filter: true, width: 130 },
    { headerName: 'title', field: "title", filter: true, width: 450, wrapText: true, autoHeight: true },
    { headerName: 'installedVersion', field: "installedVersion", width: 150 },
    { headerName: 'fixedVersion', field: "fixedVersion", width: 150 },
    { headerName: 'score', field: "score", width: 70 },
    {
      headerName: 'CVE', field: "vulnerabilityId", filter: true, width: 150,
      cellRenderer: (params: ValueGetterParams) => (`<a href="${params.data.primaryLink}" target="_blank">${params.data.vulnerabilityId}</a>`)
    },
   ];
  public masterColumnDefs: ColDef[] = [
    { headerName: 'NS', field: "resourceNamespace", filter: true, flex: 1, width: 100 },
    {
      headerName: 'Image Name and Tag', field: "imageName", filter: true, flex: 3.3, width: 330,
      valueGetter: (params: ValueGetterParams) =>
        params.data.imageName + ":" + params.data.imageTag,
    },
    {
      headerName: 'C H M L U', width: 160,
      cellRenderer: (params: ValueGetterParams) => (`
        <div class="d-flex justify-content-around align-items-center">
          <span class="badge rounded-pill text-bg-danger">${params.data.criticalCount}</span>
          <span class="badge rounded-pill text-bg-warning">${params.data.highCount}</span>
          <span class="badge rounded-pill text-bg-secondary">${params.data.mediumCount}</span>
          <span class="badge rounded-pill text-bg-info">${params.data.lowCount}</span>
        </div>
        `)
    },
  ];
  public detailsKeyValues: DetailsKeyValue[] = [];
  private masterGridApi!: GridApi;

  public get severityHelper(): SeverityHelperService {
    return this._severityHelper;
  };
  private set severityHelper(severityHelper: SeverityHelperService) {
    this._severityHelper = severityHelper;
    this._severityHelper.getSeverityDtos().then(result => this.onGetSeverities(result));
  }
  private _severityHelper!: SeverityHelperService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService) {
    vulnerabilityReportsService.getVulnerabilityReportImageDtos().subscribe(result => this.vulnerabilityReportDtos = result, error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));
    this.severityHelper = severityHelperService;

    this.masterTableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'criticalCount', header: 'SeverityId' },
    ];

    this.masterTrivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "white-space: normal;", renderType: "imageNameTag",
        extraFields: ["imageTag"],
      },
      {
        field: "criticalCount", header: "C H M L U",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 170px; max-width: 170px; ", renderType: "severityMultiTags",
        extraFields: ["highCount", "mediumCount", "lowCount","unknownCount"],
      },
    ]

    this.masterTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      tableSelectionMode: "single",
      tableHeight: "70vh",
      exposeSelectedRowsEvent: true,
    };
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    console.log("vrd - onGetSeverities - severityDtos " + severityDtos);
    this.severityDtos = severityDtos;
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  onSelectionChange(event: VulnerabilityReportImageDto[]) {
    console.log('VR - onSelectionChange - Selected row:', event);
    if (event == null || event.length == 0)
    {
      this.selectedVulnerabilityReportDto = null;
      return;
    }
    this.selectedVulnerabilityReportDto = event[0];
    if (this.selectedVulnerabilityReportDto == undefined) {
      return;
    }

    this.detailsKeyValues = [];
    let aDetailsKeyValue: DetailsKeyValue = {
      detailKey: 'Repository', detailValue: this.selectedVulnerabilityReportDto.imageRepository!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    let resourceNames: string[] = this.selectedVulnerabilityReportDto!.resources!.map(x => x.name!);
    if (resourceNames.length > 2) {
      this.narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1] + " [+" + (resourceNames.length - 2) + "]";
    }
    else {
      this.narrowedResourceNames = resourceNames.join(", ");
    }
    aDetailsKeyValue = {
      detailKey: 'Used By', detailValue: this.narrowedResourceNames
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Family', detailValue: this.selectedVulnerabilityReportDto.imageOsFamily!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Name', detailValue: this.selectedVulnerabilityReportDto.imageOsName!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
  }

  // ag grid
  onMasterGridReady(params: GridReadyEvent) {
    this.masterGridApi = params.api;
  }

  onSlaveGridReady(params: GridReadyEvent) {
  }

  onMasterSelectionChanged(event: any) {
    const selectedRows = this.masterGridApi.getSelectedRows();
    this.selectedVulnerabilityReportDto = selectedRows[0] as VulnerabilityReportImageDto;
    if (this.selectedVulnerabilityReportDto == undefined) {
      return;
    }

    this.detailsKeyValues = [];
    let aDetailsKeyValue: DetailsKeyValue = {
      detailKey: 'Repository', detailValue: this.selectedVulnerabilityReportDto.imageRepository!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    let resourceNames: string[] = this.selectedVulnerabilityReportDto!.resources!.map(x => x.name!);
    if (resourceNames.length > 2) {
      this.narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1] + " [+" + (resourceNames.length - 2) + "]";
    }
    else {
      this.narrowedResourceNames = resourceNames.join(", ");
    }
    aDetailsKeyValue = {
      detailKey: 'Used By', detailValue: this.narrowedResourceNames
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Family', detailValue: this.selectedVulnerabilityReportDto.imageOsFamily!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Name', detailValue: this.selectedVulnerabilityReportDto.imageOsName!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
  }
}
