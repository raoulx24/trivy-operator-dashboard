import { Component, ElementRef, HostListener, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { Column, ExportColumn, TrivyFilterData, TrivyTableColumn, TrivyTableOptions } from "../trivy-table/trivy-table.types";
import { GetVulnerabilityReportImageDtos$Params } from '../../api/fn/vulnerability-reports/get-vulnerability-report-image-dtos';
import { timer } from 'rxjs';
import { TrivyTableComponent } from '../trivy-table/trivy-table.component';


export type DetailsKeyValue = {
  detailKey: string,
  detailValue: string | null,
  buttonLink: string | null,
  badge: string | null,
}

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
})

export class VulnerabilityReportsComponent implements OnInit, OnDestroy {
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  public filterActiveNamespaces?: string[] | null | undefined = [];
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;

  public mainTableColumns!: Column[];
  public mainTrivyTableColumns: TrivyTableColumn[] = [];
  public mainTrivyTableOptions: TrivyTableOptions;

  public detailsTableColumns!: Column[];
  public detailsTrivyTableColumns: TrivyTableColumn[] = [];
  public detailsTrivyTableOptions: TrivyTableOptions;
  public detailsKeyValues: DetailsKeyValue[] = [];

  @ViewChild('mainContainer', { static: false }) mainContainer!: ElementRef;
  @ViewChild('vrMainTableColum', { static: false }) vrMainTableColum!: ElementRef;
  @ViewChild('vrMainTable', { static: false }) vrMainTable!: TrivyTableComponent<VulnerabilityReportImageDto>;
  @ViewChild('vrDetailsColumn', { static: false }) vrDetailsColumn!: ElementRef;
  @ViewChild('vrDetailsPanel', { static: false }) vrDetailsPanel?: ElementRef;
  @ViewChild('vrDetailsTable', { static: false }) vrDetailsTable!: ElementRef;
  private mutationObserver!: MutationObserver;
  private resizeObserver!: ResizeObserver;
  public detailsTableHeight: string = "";
  public isImageUsageDialogVisible: boolean = false;
  public isMainTableLoading: boolean = true;

  public isVrDetailsTable: boolean = false;

  public get severityHelper(): SeverityHelperService {
    return this._severityHelper;
  };
  private set severityHelper(severityHelper: SeverityHelperService) {
    this._severityHelper = severityHelper;
    this._severityHelper.getSeverityDtos().then(result => this.onGetSeverities(result));
  }
  private _severityHelper!: SeverityHelperService;
  private _vulnerabilityReportsService!: VulnerabilityReportsService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService, private renderer: Renderer2) {
    vulnerabilityReportsService.getVulnerabilityReportImageDtos().subscribe(result => this.onGetVulnerabilityReportDtos(result), error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));
    this.severityHelper = severityHelperService;
    this._vulnerabilityReportsService = vulnerabilityReportsService;

    this.mainTableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'criticalCount', header: 'Severities C H M L U' },
    ];

    this.mainTrivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "white-space: normal;", renderType: "imageNameTag",
        extraFields: ["imageTag", "imageEosl"],
      },
      {
        field: "criticalCount", header: "Severity C / H / M / L / U",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 170px; max-width: 170px; ", renderType: "severityMultiTags",
        extraFields: ["highCount", "mediumCount", "lowCount", "unknownCount"],
      },
    ]

    this.mainTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: true,
      isRefreshFiltrable: true,
      isFooterVisible: true,
      tableSelectionMode: "single",
      exposeSelectedRowsEvent: true,
      stateKey: "vr.table-main",
    };

    this.detailsTableColumns = [
      { field: 'severityId', header: 'Sev' },
      { field: 'resource', header: 'Resource' },
      { field: 'title', header: 'Title' },
      { field: 'installedVersion', header: 'Installed Version' },
      { field: 'fixedVersion', header: 'Fixed Version' },
      { field: 'score', header: 'Score' },
      { field: 'vulnerabilityId', header: 'CVE' },
    ];

    this.detailsTrivyTableColumns = [
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 90px; max-width: 90px;", renderType: "severityBadge",
      },
      {
        field: "resource", header: "Resource",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 130px; max-width: 130px", renderType: "standard",
      },
      {
        field: "title", header: "Title",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "white-space: normal;", renderType: "standard",
      },
      {
        field: "installedVersion", header: "Installed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "fixedVersion", header: "Fixed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "score", header: "Score",
        isFiltrable: false, isSortable: true, multiSelectType: "none",
        style: "width: 70px; max-width: 70px", renderType: "standard",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 150px; max-width: 150px;", renderType: "link",
        extraFields: ["primaryLink"],
      },
    ];

    this.detailsTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: false,
      isRefreshFiltrable: false,
      isFooterVisible: false,
      tableSelectionMode: null,
      exposeSelectedRowsEvent: false,
      stateKey: "vr.table-details",
    };

    this.initDetailsKeyValues();
  }

  ngOnInit() {
    
  }

  ngAfterContentInit() {
    this.computeVrDetailsTableSize();
    this.startResizeObservers();
  }

  private startResizeObservers() {
    this.resizeObserverTest = new ResizeObserver((resizes) => {
      resizes.forEach(async (resize) => {
        // ignore resizes with 0 size
        if (resize.contentRect.height == 0) {
          return;
        }
        await this.computeVrDetailsTableSize();
      });
    });
    let vrDetailsPanelElement = document.getElementById("vrDetailsPanel")
    if (vrDetailsPanelElement)
      this.resizeObserverTest.observe(vrDetailsPanelElement);
    if (this.mainContainer) {
      this.resizeObserverTest.observe(this.mainContainer.nativeElement);
    }
  }

  private async computeVrDetailsTableSize() {
    let vrMainTableElement = document.getElementById("vrMainTable");
    let vrDetailsPanelElement = document.getElementById("vrDetailsPanel");
    if (!vrMainTableElement || !vrDetailsPanelElement) {
      return;
    }
    this.detailsTableHeight = `${vrMainTableElement.getBoundingClientRect().height - vrDetailsPanelElement.getBoundingClientRect().height}px`;
  }

  ngOnDestroy() {
    this.resizeObserverTest.disconnect();
  }

  private initDetailsKeyValues() {
    this.detailsKeyValues = [];
    this.detailsKeyValues.push({ detailKey: 'Repository', detailValue: 'n/a', buttonLink: null, badge: '!' });
    this.detailsKeyValues.push({ detailKey: 'Used By', detailValue: 'n/a', buttonLink: null, badge: '!' });
    this.detailsKeyValues.push({ detailKey: 'OS Family - Name', detailValue: 'n/a', buttonLink: null, badge: '!' });
  }

  onGetVulnerabilityReportDtos(vrDtos: VulnerabilityReportImageDto[]) {
    this.vulnerabilityReportDtos = vrDtos;
    this.selectedVulnerabilityReportDto = null;
    this.isMainTableLoading = false;
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    this.severityDtos = severityDtos;
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  onSelectionChange(event: VulnerabilityReportImageDto[]) {
    if (event == null || event.length == 0 || this.isMainTableLoading)
    {
      this.initDetailsKeyValues();
      this.selectedVulnerabilityReportDto = null;
      return;
    }

    this.detailsKeyValues = [];
    let aDetailsKeyValue: DetailsKeyValue = {
      detailKey: 'Repository',
      detailValue: event[0].imageRepository!,
      buttonLink: null, badge: null,
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    let resourceNames: string[] = event[0]!.resources!.map(x => x.name!);
    let narrowedResourceNames: string;
    let narrowedResourceNamesLink: string | null = null;
    if (resourceNames.length > 2) {
      narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1];
      narrowedResourceNamesLink = " [+" + (resourceNames.length - 2) + "]";
    }
    else {
      narrowedResourceNames = resourceNames.join(", ");
      narrowedResourceNamesLink = "[...]"
    }
    aDetailsKeyValue = {
      detailKey: 'Used By',
      detailValue: narrowedResourceNames,
      buttonLink: narrowedResourceNamesLink, badge: null,
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Family - Name',
      detailValue: (event[0].imageOsFamily! + ' - ' + event[0].imageOsName!),
      buttonLink: null, badge: event[0].imageEosl ? 'End of Service Life' : null,
    };
    this.detailsKeyValues.push(aDetailsKeyValue);

    this.selectedVulnerabilityReportDto = event[0];
    // ugly hack
    //if (!this.isVrDetailsTable)
    //  timer(0).subscribe(x => { this.isVrDetailsTable = true; });
  }

  public onFilterVRs() {
    console.log("VulnerabilityReportsComponent - onFilterVRs");
  }

  public onRefreshRequested(event: TrivyFilterData) {
    console.log("VulnerabilityReportsComponent - onRefreshRequested - enter");
    let excludedSeverities: number[] = [];
    this.severityDtos?.forEach(x => {
      if (!event.selectedSeverityIds.includes(x.id)) {
        excludedSeverities.push(x.id);
      }
    })

    let params: GetVulnerabilityReportImageDtos$Params = {
      namespaceName: event.namespaceName ? event.namespaceName : undefined,
      excludedSeverities: excludedSeverities.length > 0 ? excludedSeverities.join(",") : undefined,
    }
    this.isMainTableLoading = true;
    this.initDetailsKeyValues();
    this._vulnerabilityReportsService.getVulnerabilityReportImageDtos(params).subscribe(result => this.onGetVulnerabilityReportDtos(result), error => console.error(error));
  }

  public onUsedByMore() {
    this.isImageUsageDialogVisible = true;
  }

  // tests
  private mutationObserverTest!: MutationObserver;
  private resizeObserverTest!: ResizeObserver;

  @HostListener('window:resize', ['$event'])
  onViewPortResize(event: Event) {
    const width = window.innerWidth;
    const height = window.innerHeight;
    console.log(`VulnerabilityReportsComponent - viewport - ${width} x ${height}`);
  }
}

/*
The observe method of the MutationObserver takes a configuration object with several options to specify what kinds of DOM mutations to observe. Here are the main options you can use:

childList: Set to true to monitor the addition or removal of child nodes.
attributes: Set to true to watch for changes to the attributes of the target node.
characterData: Set to true to observe changes to the text content of the target node.
subtree: Set to true to extend monitoring to the entire subtree of nodes rooted at the target node.
attributeFilter: An array of specific attribute names to be monitored. If not included, changes to all attributes will be observed.
attributeOldValue: Set to true to record the previous value of any attribute that changes.
characterDataOldValue: Set to true to record the previous value of the text content when it changes

https://dev.to/alexmacarthur/use-a-mutationobserver-to-handle-dom-nodes-that-dont-exist-yet-3210

position in viewport:
const rect = this.myElement.nativeElement.getBoundingClientRect();
console.log('Top:', rect.top);
console.log('Left:', rect.left);
*/

