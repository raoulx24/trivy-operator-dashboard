import { Component, ElementRef, HostListener, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { Column, ExportColumn, TrivyFilterData, TrivyTableColumn, TrivyTableOptions } from "../trivy-table/trivy-table.types";
import { GetVulnerabilityReportImageDtos$Params } from '../../api/fn/vulnerability-reports/get-vulnerability-report-image-dtos';
import { timer } from 'rxjs';
import { TrivyTableComponent } from '../trivy-table/trivy-table.component';


export type DetailsKeyValue = {
  detailKey: string,
  detailValue: string | null,
  buttonLink: string | null,
  badge: string | null,
}

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
})

export class VulnerabilityReportsComponent implements OnInit, OnDestroy {
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  public filterActiveNamespaces?: string[] | null | undefined = [];
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;

  public masterTableColumns!: Column[];
  public masterTrivyTableColumns: TrivyTableColumn[] = [];
  public masterTrivyTableOptions: TrivyTableOptions;

  public slaveTableColumns!: Column[];
  public slaveTrivyTableColumns: TrivyTableColumn[] = [];
  public slaveTrivyTableOptions: TrivyTableOptions;
  public detailsKeyValues: DetailsKeyValue[] = [];

  @ViewChild('mainContainer', { static: false }) mainContainer!: ElementRef;
  @ViewChild('vrMainTableColum', { static: false }) vrMainTableColum!: ElementRef;
  @ViewChild('vrMainTable', { static: false }) vrMainTable!: TrivyTableComponent<VulnerabilityReportImageDto>;
  @ViewChild('vrDetailsColumn', { static: false }) vrDetailsColumn!: ElementRef;
  @ViewChild('vrDetailsPanel', { static: false }) vrDetailsPanel?: ElementRef;
  @ViewChild('vrDetailsTable', { static: false }) vrDetailsTable!: ElementRef;
  private mutationObserver!: MutationObserver;
  private resizeObserver!: ResizeObserver;
  public slaveTableHeight: string = "";
  public isImageUsageDialogVisible: boolean = false;

  public isVrDetailsTable: boolean = false;

  public get severityHelper(): SeverityHelperService {
    return this._severityHelper;
  };
  private set severityHelper(severityHelper: SeverityHelperService) {
    this._severityHelper = severityHelper;
    this._severityHelper.getSeverityDtos().then(result => this.onGetSeverities(result));
  }
  private _severityHelper!: SeverityHelperService;
  private _vulnerabilityReportsService!: VulnerabilityReportsService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService, private renderer: Renderer2) {
    vulnerabilityReportsService.getVulnerabilityReportImageDtos().subscribe(result => this.onGetVulnerabilityReportDtos(result), error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));
    this.severityHelper = severityHelperService;
    this._vulnerabilityReportsService = vulnerabilityReportsService;

    this.masterTableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'criticalCount', header: 'Severities C H M L U' },
    ];

    this.masterTrivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "white-space: normal;", renderType: "imageNameTag",
        extraFields: ["imageTag", "imageEosl"],
      },
      {
        field: "criticalCount", header: "Severity C / H / M / L / U",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 170px; max-width: 170px; ", renderType: "severityMultiTags",
        extraFields: ["highCount", "mediumCount", "lowCount","unknownCount"],
      },
      //{
      //  field: "criticalCount", header: "C",
      //  isFiltrable: false, isSortable: false, multiSelectType: "none",
      //  style: "width: 35px; max-width: 35px; ", renderType: "standard",
      //},
      //{
      //  field: "highCount", header: "H",
      //  isFiltrable: false, isSortable: false, multiSelectType: "none",
      //  style: "width: 35px; max-width: 35px; ", renderType: "standard",
      //},
      //{
      //  field: "mediumCount", header: "M",
      //  isFiltrable: false, isSortable: false, multiSelectType: "none",
      //  style: "width: 35px; max-width: 35px; ", renderType: "standard",
      //},
      //{
      //  field: "lowCount", header: "L",
      //  isFiltrable: false, isSortable: false, multiSelectType: "none",
      //  style: "width: 35px; max-width: 35px; ", renderType: "standard",
      //},
      //{
      //  field: "unknownCount", header: "U",
      //  isFiltrable: false, isSortable: false, multiSelectType: "none",
      //  style: "width: 35px; max-width: 35px; ", renderType: "standard",
      //},
    ]

    this.masterTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: true,
      isRefreshFiltrable: true,
      tableSelectionMode: "single",
      tableHeight: "82vh",
      exposeSelectedRowsEvent: true,
      ifFooterVisible: true,
    };

    this.slaveTableColumns = [
      { field: 'severityId', header: 'Sev' },
      { field: 'resource', header: 'Resource' },
      { field: 'title', header: 'Title' },
      { field: 'installedVersion', header: 'Installed Version' },
      { field: 'fixedVersion', header: 'Fixed Version' },
      { field: 'score', header: 'Score' },
      { field: 'vulnerabilityId', header: 'CVE' },
    ];

    this.slaveTrivyTableColumns = [
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 90px; max-width: 90px;", renderType: "severityBadge",
      },
      {
        field: "resource", header: "Resource",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 130px; max-width: 130px", renderType: "standard",
      },
      {
        field: "title", header: "Title",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "white-space: normal;", renderType: "standard",
      },
      {
        field: "installedVersion", header: "Installed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "fixedVersion", header: "Fixed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "score", header: "Score",
        isFiltrable: false, isSortable: true, multiSelectType: "none",
        style: "width: 70px; max-width: 70px", renderType: "standard",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 150px; max-width: 150px;", renderType: "link",
        extraFields: ["primaryLink"],
      },
    ];

    this.slaveTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: false,
      isRefreshFiltrable: false,
      tableSelectionMode: null,
      //tableHeight: "664px",
      tableHeight: "",
      exposeSelectedRowsEvent: false,
      ifFooterVisible: false,
    };
  }

  ngOnInit() { }

  ngAfterViewInit() {
    this.mutationObserver = new MutationObserver(mutations => {
    //  // console.log("VulnerabilityReportsComponent - observe - mainContainer height " + this.mainContainer.nativeElement.offsetHeight);
    //  mutations.forEach(mutation => {
    //    if (mutation.type === 'childList') {
    //      if (this.vrDetailsColumn) {
    //        this.observeResize();
    //      }
    //    }
    //  });
    });

    // tests
    this.mutationObserverTest = new MutationObserver(mutations => {
      console.log(`VulnerabilityReportsComponent - mutationObserveTest - mutations ${mutations.length}`);
      mutations.forEach(mutation => {
        mutation.addedNodes.forEach(x => {
          console.log(`VulnerabilityReportsComponent - mutationObserveTest - added node ${(x as Element).id}`)
          switch ((x as Element)?.id) {
            case "vrMainTableColum": {
              let y = document.getElementById("vrMainTable")
              if (y) { 
                this.resizeObserverTest.observe(y);
              }
              // don't autoselect
              if (this.vrMainTable && !this.selectedVulnerabilityReportDto) {
                this.vrMainTable.selectRow(this.vulnerabilityReportDtos![0]);
              }
              break;
            }
            case "vrDetailsColumn": {
              console.log("VulnerabilityReportsComponent - mutationObserveTest - mutation observe for vrDetailsColumn");
              this.mutationObserverTest.observe(x, { childList: true });
              if (this.vrDetailsPanel) {
                console.log("VulnerabilityReportsComponent - mutationObserveTest - resize observe for vrDetailsPanel");
                console.log(this.vrDetailsPanel.nativeElement);
                let y = document.getElementById("vrDetailsPanel")
                console.log(y);
                if (y)
                  this.resizeObserverTest.observe(y);
              }
              break;
            }
          }
        });
        mutation.removedNodes.forEach(x => console.log(`VulnerabilityReportsComponent - mutationObserveTest - removed node ${(x as Element).id}`));
      })
    });
    this.resizeObserverTest = new ResizeObserver(resizes => {
      console.log(`VulnerabilityReportsComponent - resizeObserverTest - resizes ${resizes.length}`);
      resizes.forEach(resize => {
        // ignore resizes with 0 size
        if (resize.contentRect.height == 0) {
          return;
        }
        console.log(`VulnerabilityReportsComponent - resizeObserveTest - Element ${(resize.target as Element).id}`);
        console.log(`VulnerabilityReportsComponent - resizeObserveTest - Element size ${resize.contentRect.width}x${resize.contentRect.height}`);
        switch ((resize.target as Element)?.id) {
          case "vrDetailsPanel": {
            let vrMainTable = document.getElementById("vrMainTable");

            if (vrMainTable) {
              this.slaveTableHeight = `${vrMainTable.getBoundingClientRect().height - resize.target.getBoundingClientRect().height}px`;
            }
            break;
          }
          case "vrMainTable": {
            let vrDetailsPanel = document.getElementById("vrDetailsPanel");
            if (vrDetailsPanel) {
              this.slaveTableHeight = `${resize.target.getBoundingClientRect().height - vrDetailsPanel.getBoundingClientRect().height}px`;
            }
            break;
          }
        }
      });
    });
    this.mutationObserverTest.observe(this.mainContainer.nativeElement, { childList: true });
    if (this.mainContainer) {
      this.resizeObserverTest.observe(this.mainContainer.nativeElement);
    }
    // tests - end

    this.mutationObserver.observe(this.mainContainer.nativeElement, { childList: true });
    
  }

  ngOnDestroy() {
    if (this.resizeObserver && this.vrDetailsColumn) {
      this.resizeObserver.unobserve(this.vrDetailsColumn.nativeElement);
    }
    this.mutationObserver.disconnect();
  }

  observeResize() {
    this.resizeObserver = new ResizeObserver(entries => {
      for (let entry of entries) {
        // console.log('Element size:', entry.contentRect.width, 'x', entry.contentRect.height);
        const parentHeight = this.vrDetailsColumn.nativeElement.offsetHeight;
        const children = this.vrDetailsColumn.nativeElement.children;
        let childrenHeight = 0;

        for (let i = 0; i < children.length; i++) {
          childrenHeight += children[i].offsetHeight;
        }
        const emptySpace = parentHeight - childrenHeight;

        if (emptySpace == 0) return;
        // console.log('Height of empty space:', emptySpace);
        let x = `${emptySpace}px`;
        this.slaveTrivyTableOptions.tableHeight = x;
        this.slaveTableHeight = x;
      }
    });
    this.resizeObserver.observe(this.vrDetailsColumn.nativeElement);
  }

  onGetVulnerabilityReportDtos(vrDtos: VulnerabilityReportImageDto[]) {
    this.vulnerabilityReportDtos = vrDtos;

    // don't autoselect - not necessary
    //if (vrDtos != null && vrDtos.length > 0) {
    //  this.onSelectionChange([vrDtos[0]]);
    //}
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    this.severityDtos = severityDtos;
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  onSelectionChange(event: VulnerabilityReportImageDto[]) {
    if (event == null || event.length == 0)
    {
      this.selectedVulnerabilityReportDto = null;
      return;
    }

    //if (this.selectedVulnerabilityReportDto == undefined) {
    //  return;
    //}

    this.detailsKeyValues = [];
    let aDetailsKeyValue: DetailsKeyValue = {
      detailKey: 'Repository',
      detailValue: event[0].imageRepository!,
      buttonLink: null, badge: null,
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    let resourceNames: string[] = event[0]!.resources!.map(x => x.name!);
    let narrowedResourceNames: string;
    let narrowedResourceNamesLink: string | null = null;
    if (resourceNames.length > 2) {
      narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1];
      narrowedResourceNamesLink = " [+" + (resourceNames.length - 2) + "]";
    }
    else {
      narrowedResourceNames = resourceNames.join(", ");
      narrowedResourceNamesLink = "[...]"
    }
    aDetailsKeyValue = {
      detailKey: 'Used By',
      detailValue: narrowedResourceNames,
      buttonLink: narrowedResourceNamesLink, badge: null,
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Family - Name',
      detailValue: (event[0].imageOsFamily! + ' - ' + event[0].imageOsName!),
      buttonLink: null, badge: event[0].imageEosl ? 'End of Service Life' : null,
    };
    this.detailsKeyValues.push(aDetailsKeyValue);

    this.selectedVulnerabilityReportDto = event[0];
    // ugly hack
    if (!this.isVrDetailsTable)
      timer(0).subscribe(x => { this.isVrDetailsTable = true; });
  }

  public onFilterVRs() {
    console.log("VulnerabilityReportsComponent - onFilterVRs");
  }

  public onRefreshRequested(event: TrivyFilterData) {
    console.log("VulnerabilityReportsComponent - onRefreshRequested - enter");
    let excludedSeverities: number[] = [];
    this.severityDtos?.forEach(x => {
      if (!event.selectedSeverities.includes(x)) {
        excludedSeverities.push(x.id);
      }
    })

    let params: GetVulnerabilityReportImageDtos$Params = {
      namespaceName: event.namespaceName ? event.namespaceName : undefined,
      excludedSeverities: excludedSeverities.length > 0 ? excludedSeverities.join(",") : undefined,
    }
    this._vulnerabilityReportsService.getVulnerabilityReportImageDtos(params).subscribe(result => this.onGetVulnerabilityReportDtos(result), error => console.error(error));
  }

  public onUsedByMore() {
    this.isImageUsageDialogVisible = true;
  }

  // tests
  private mutationObserverTest!: MutationObserver;
  private resizeObserverTest!: ResizeObserver;

  @HostListener('window:resize', ['$event'])
  onViewPortResize(event: Event) {
    const width = window.innerWidth;
    const height = window.innerHeight;
    console.log(`VulnerabilityReportsComponent - viewport - ${width} x ${height}`);
  }
}

/*
The observe method of the MutationObserver takes a configuration object with several options to specify what kinds of DOM mutations to observe. Here are the main options you can use:

childList: Set to true to monitor the addition or removal of child nodes.
attributes: Set to true to watch for changes to the attributes of the target node.
characterData: Set to true to observe changes to the text content of the target node.
subtree: Set to true to extend monitoring to the entire subtree of nodes rooted at the target node.
attributeFilter: An array of specific attribute names to be monitored. If not included, changes to all attributes will be observed.
attributeOldValue: Set to true to record the previous value of any attribute that changes.
characterDataOldValue: Set to true to record the previous value of the text content when it changes

https://dev.to/alexmacarthur/use-a-mutationobserver-to-handle-dom-nodes-that-dont-exist-yet-3210

position in viewport:
const rect = this.myElement.nativeElement.getBoundingClientRect();
console.log('Top:', rect.top);
console.log('Left:', rect.left);
*/

