import { CommonModule } from '@angular/common';
import { Component, ViewChild } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { GetVulnerabilityReportImageDtos$Params } from '../../api/fn/vulnerability-reports/get-vulnerability-report-image-dtos';
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { VulnerabilityReportDetailDto } from '../../api/models/vulnerability-report-detail-dto';
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { Column, ExportColumn, TrivyFilterData, TrivyTableColumn, TrivyTableOptions, TrivyExpandTableOptions, TrivyTableCellCustomOptions } from "../trivy-table/trivy-table.types";

import { TrivyTableComponent } from '../trivy-table/trivy-table.component';

import { ButtonModule } from 'primeng/button';
import { DialogModule } from 'primeng/dialog';
import { PanelModule } from 'primeng/panel';
import { TableModule } from 'primeng/table';
import { TagModule } from 'primeng/tag';

@Component({
  selector: 'app-vulnerability-reports',
  standalone: true,
  imports: [CommonModule, TrivyTableComponent, DialogModule, TableModule],
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
})

export class VulnerabilityReportsComponent {
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];

  public mainTableColumns!: Column[];
  public mainTrivyTableColumns: TrivyTableColumn[] = [];
  public mainTrivyTableOptions: TrivyTableOptions;
  public mainTableExpandTableOptions: TrivyExpandTableOptions;
  public mainTableExpandCallbackDto: VulnerabilityReportImageDto | null | undefined;
  public isMainTableLoading: boolean = true;
  @ViewChild('vrMainTable', { static: true }) vrMainTable!: TrivyTableComponent<VulnerabilityReportImageDto>;

  public detailsTableColumns!: Column[];
  public detailsTrivyTableColumns: TrivyTableColumn[] = [];
  public detailsTrivyTableOptions: TrivyTableOptions;

  public isImageUsageDialogVisible: boolean = false;

  constructor(private vulnerabilityReportsService: VulnerabilityReportsService, public severityHelperService: SeverityHelperService) {
    vulnerabilityReportsService.getVulnerabilityReportImageDtos()
      .subscribe({
        next: (res) => this.onGetVulnerabilityReportDtos(res),
        error: (err) => console.error(err)
      });
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces()
      .subscribe({
        next: (res) => this.onGetActiveNamespaces(res),
        error: (err) => console.error(err)
      });

    this.mainTableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'criticalCount', header: 'Severities C H M L U' },
    ];
    this.mainTrivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "white-space: normal;", renderType: "imageNameTag",
        extraFields: ["imageTag", "imageEosl"],
      },
      {
        field: "criticalCount", header: "Severity C / H / M / L / U",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 170px; max-width: 170px; ", renderType: "severityMultiTags",
        extraFields: ["highCount", "mediumCount", "lowCount", "unknownCount"],
      },
    ]
    this.mainTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: true,
      isRefreshFiltrable: true,
      isFooterVisible: true,
      tableSelectionMode: "single",
      tableStyle: {},
      stateKey: "Vulnerability Reports - Main",
      dataKey: "uid",
    };
    this.detailsTableColumns = [
      { field: 'severityId', header: 'Sev' },
      { field: 'resource', header: 'Resource' },
      { field: 'title', header: 'Title' },
      { field: 'installedVersion', header: 'Installed Version' },
      { field: 'fixedVersion', header: 'Fixed Version' },
      { field: 'score', header: 'Score' },
      { field: 'vulnerabilityId', header: 'CVE' },
    ];
    this.detailsTrivyTableColumns = [
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 90px; max-width: 90px;", renderType: "severityBadge",
      },
      {
        field: "resource", header: "Resource",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 130px; max-width: 130px", renderType: "standard",
      },
      {
        field: "title", header: "Title",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "white-space: normal;", renderType: "standard",
      },
      {
        field: "installedVersion", header: "Installed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "fixedVersion", header: "Fixed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "publishedDate", header: "Publish",
        isFiltrable: false, isSortable: true, multiSelectType: "none",
        style: "width: 900px; max-width: 90px", renderType: "date",
      },
      {
        field: "lastModifiedDate", header: "Modif",
        isFiltrable: false, isSortable: true, multiSelectType: "none",
        style: "width: 90px; max-width: 90px", renderType: "date",
      },
      {
        field: "score", header: "Score",
        isFiltrable: false, isSortable: true, multiSelectType: "none",
        style: "width: 70px; max-width: 70px", renderType: "standard",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 150px; max-width: 150px;", renderType: "link",
        extraFields: ["primaryLink"],
      },
    ];
    this.detailsTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: false,
      isRefreshFiltrable: false,
      isFooterVisible: false,
      tableSelectionMode: null,
      tableStyle: {},
      stateKey: "Vulnerability Reports - Details",
      dataKey: null,
    };
    this.mainTableExpandTableOptions = new TrivyExpandTableOptions(false, 2, 3);
  }

  onGetVulnerabilityReportDtos(vrDtos: VulnerabilityReportImageDto[]) {
    this.vulnerabilityReportDtos = vrDtos;
    this.vrMainTable.onTableClearSelected();
    this.selectedVulnerabilityReportDto = null;
    this.isMainTableLoading = false;
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    this.severityDtos = severityDtos;
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  onSelectionChange(event: VulnerabilityReportImageDto[]) {
    if (event == null || event.length == 0) {
      this.selectedVulnerabilityReportDto = null;
      return;
    }
    else {
      this.selectedVulnerabilityReportDto = event[0];
    }
  }

  public onRefreshRequested(event: TrivyFilterData) {
    console.log("VulnerabilityReportsComponent - onRefreshRequested - enter");
    let excludedSeverities = this.severityHelperService.getSeverityIds()
      .filter(severityId => !event.selectedSeverityIds.includes(severityId)) || [];

    let params: GetVulnerabilityReportImageDtos$Params = {
      namespaceName: event.namespaceName ?? undefined,
      excludedSeverities: excludedSeverities.length > 0 ? excludedSeverities.join(",") : undefined,
    }
    this.isMainTableLoading = true;
    this.vulnerabilityReportsService.getVulnerabilityReportImageDtos(params)
      .subscribe({
        next: (res) => this.onGetVulnerabilityReportDtos(res),
        error: (err) => console.error(err)
      });
  }

  mainTableExpandCellOptions(dto: VulnerabilityReportImageDto, type: "header" | "row", colIndex: number, rowIndex?: number): TrivyTableCellCustomOptions {
    rowIndex ?? 0;
    let celValue: string = "";
    let celStyle: string = "";
    let celBadge: string | undefined;
    let celButtonLink: string | undefined;

    switch (colIndex) {
      case 0:
        celStyle = "width: 70px; min-width: 70px; height: 50px"
        switch (rowIndex) {
          case 0:
            celValue = "Repository";
            break;
          case 1:
            celValue = "Used By";
            break;
          case 2:
            celValue = "OS Family";
            break;
        }
        break;
      case 1:
        celStyle = "white-space: normal; display: flex; align-items: center; height: 50px;"
        switch (rowIndex) {
          case 0:
            celValue = dto.imageRepository!;
            break;
          case 1:
            let resourceNames: string[] = dto!.resources!.map(x => x.name!);
            let narrowedResourceNames: string;
            let narrowedResourceNamesLink: string | null = null;
            if (resourceNames.length > 2) {
              narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1];
              narrowedResourceNamesLink = " [+" + (resourceNames.length - 2) + "]";
            }
            else {
              narrowedResourceNames = resourceNames.join(", ");
              narrowedResourceNamesLink = "[...]"
            }
            celValue = narrowedResourceNames;
            celButtonLink = narrowedResourceNamesLink;
            break;
          case 2:
            celValue = dto.imageOsFamily! + ' - ' + dto.imageOsName!;
            celBadge = dto.imageEosl ? 'End of Service Life' : undefined;
            break;
        }
        break;
    }

    return {
      value: celValue,
      style: celStyle,
      badge: celBadge,
      buttonLink: celButtonLink,
    }
  }

  mainTableExpandCallback(dto: VulnerabilityReportImageDto) {
    this.mainTableExpandCallbackDto = dto;
    this.isImageUsageDialogVisible = true;
  }
}
