import { Component, ViewChild } from '@angular/core';
import { ColDef, GridApi, GridReadyEvent, ValueGetterParams, } from "ag-grid-community";
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportSummaryDto } from "../../api/models/vulnerability-report-summary-dto";
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { VulnerabilitySeverityRenderer } from "./vulnerability-severity-renderer.component";

import { PrimeNgChartData, PrimeNgHelper } from "../../utils/severity-helper";
import { SeverityHelperService } from "../services/severity-helper.service"

export type DetailsKeyValue = {
  detailKey: string,
  detailValue: string | null,
}

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
  providers: [SeverityHelperService],
})

export class VulnerabilityReportsComponent {
  //public vulnerabilityReportSummaryDtos?: VulnerabilityReportSummaryDto[] | null | undefined;
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;
  public narrowedResourceNames: string | null | undefined;
  public masterRowSelection: "single" | "multiple" = "single";
  public slaveColumnDefs: ColDef[] = [
    {
      headerName: '',
      field: "severity",
      filter: true,
      width: 80,
      cellRenderer: VulnerabilitySeverityRenderer
    },
    { headerName: 'resource', field: "resource", filter: true, width: 130 },
    { headerName: 'title', field: "title", filter: true, width: 450, wrapText: true, autoHeight: true },
    { headerName: 'installedVersion', field: "installedVersion", width: 150 },
    { headerName: 'fixedVersion', field: "fixedVersion", width: 150 },
    { headerName: 'score', field: "score", width: 70 },
    {
      headerName: 'CVE', field: "vulnerabilityId", filter: true, width: 150,
      cellRenderer: (params: ValueGetterParams) => (`<a href="${params.data.primaryLink}" target="_blank">${params.data.vulnerabilityId}</a>`)
    },
   ];
  public masterColumnDefs: ColDef[] = [
    { headerName: 'NS', field: "resourceNamespace", filter: true, flex: 1, width: 100 },
    {
      headerName: 'Image Name and Tag', field: "imageName", filter: true, flex: 3.3, width: 330,
      valueGetter: (params: ValueGetterParams) =>
        params.data.imageName + ":" + params.data.imageTag,
    },
    {
      headerName: 'C H M L U', width: 160,
      cellRenderer: (params: ValueGetterParams) => (`
        <div class="d-flex justify-content-around align-items-center">
          <span class="badge rounded-pill text-bg-danger">${params.data.criticalCount}</span>
          <span class="badge rounded-pill text-bg-warning">${params.data.highCount}</span>
          <span class="badge rounded-pill text-bg-secondary">${params.data.mediumCount}</span>
          <span class="badge rounded-pill text-bg-info">${params.data.lowCount}</span>
        </div>
        `)
    },
  ];
  public detailsKeyValues: DetailsKeyValue[] = [];
  private masterGridApi!: GridApi;

  //public primeNgChartData: PrimeNgChartData[] | null | undefined;
  //// to do - change it to type
  //primeNgChartOptions: any;

  //public get primeNgHelper(): PrimeNgHelper { return this._primeNgHelper; };
  //private _primeNgHelper: PrimeNgHelper;
  private _severityHelperService: SeverityHelperService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService) {
    //vulnerabilityReportsService.getVulnerabilityReportSummaryDtos().subscribe(result => this.onVulnerabilityReportSummaryDtos(result), error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportImageDtos().subscribe(result => this.vulnerabilityReportDtos = result, error => console.error(error));
    this._severityHelperService = severityHelperService;
    //this._primeNgHelper = new PrimeNgHelper(severityHelperService);

    //const documentStyle = getComputedStyle(document.documentElement);
    //const textColor = documentStyle.getPropertyValue('--text-color');
    //this.primeNgChartOptions = {
    //  plugins: {
    //    legend: {
    //      labels: {
    //        usePointStyle: true,
    //        color: textColor,
    //      },
    //      position: 'bottom',
    //    }
    //  }
    //};
  }

  //onVulnerabilityReportSummaryDtos(vulnerabilityReportSummaryDtos?: VulnerabilityReportSummaryDto[]) {
  //  this.vulnerabilityReportSummaryDtos = vulnerabilityReportSummaryDtos;

  //  if (vulnerabilityReportSummaryDtos == null) {
  //    return;
  //  }

  //  let primeNgChartData: PrimeNgChartData[] = [];

  //  this._severityHelperService.getSeverityDtos().then(x => {

  //    for (var vulnerabilityReportSummaryDto of vulnerabilityReportSummaryDtos) {
  //      let chartData: PrimeNgChartData = this.primeNgHelper.GetDataForPrimeNgChart(vulnerabilityReportSummaryDto.values,
  //        vulnerabilityReportSummaryDto.namespaceName!,
  //        x);
  //      primeNgChartData.push(chartData);
  //    }

  //    this.primeNgChartData = primeNgChartData;
  //  });
  //}

  //getCssVariableValue(variableName: string): string {
  //  return getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
  //}

  onMasterGridReady(params: GridReadyEvent) {
    this.masterGridApi = params.api;
  }

  onSlaveGridReady(params: GridReadyEvent) {
  }

  onMasterSelectionChanged(event: any) {
    const selectedRows = this.masterGridApi.getSelectedRows();
    this.selectedVulnerabilityReportDto = selectedRows[0] as VulnerabilityReportImageDto;
    if (this.selectedVulnerabilityReportDto == undefined) {
      return;
    }

    this.detailsKeyValues = [];
    let aDetailsKeyValue: DetailsKeyValue = {
      detailKey: 'Repository', detailValue: this.selectedVulnerabilityReportDto.imageRepository!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    let resourceNames: string[] = this.selectedVulnerabilityReportDto!.resources!.map(x => x.name!);
    if (resourceNames.length > 2) {
      this.narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1] + " [+" + (resourceNames.length - 2) + "]";
    }
    else {
      this.narrowedResourceNames = resourceNames.join(", ");
    }
    aDetailsKeyValue = {
      detailKey: 'Used By', detailValue: this.narrowedResourceNames
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Family', detailValue: this.selectedVulnerabilityReportDto.imageOsFamily!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Name', detailValue: this.selectedVulnerabilityReportDto.imageOsName!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
  }
}
