import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';

import { GetVulnerabilityReportImageDtos$Params } from '../../api/fn/vulnerability-reports/get-vulnerability-report-image-dtos';
import { VulnerabilityReportImageDto } from '../../api/models/vulnerability-report-image-dto';
import { VulnerabilityReportsService } from '../../api/services/vulnerability-reports.service';
import { GenericMasterDetailComponent } from '../generic-master-detail/generic-master-detail.component';
import {
  TrivyExpandTableOptions,
  TrivyFilterData,
  TrivyTableCellCustomOptions,
  TrivyTableColumn,
  TrivyTableOptions,
} from '../trivy-table/trivy-table.types';

import { DialogModule } from 'primeng/dialog';
import { TableModule } from 'primeng/table';
import { SeverityUtils } from '../utils/severity.utils';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-vulnerability-reports',
  standalone: true,
  imports: [CommonModule, GenericMasterDetailComponent, DialogModule, TableModule],
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
})
export class VulnerabilityReportsComponent implements OnInit {
  public dataDtos: VulnerabilityReportImageDto[] = [];
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null = null;
  public activeNamespaces?: string[] = [];

  public mainTableColumns: TrivyTableColumn[] = [];
  public mainTableOptions: TrivyTableOptions;
  public mainTableExpandTableOptions: TrivyExpandTableOptions<VulnerabilityReportImageDto>;
  public mainTableExpandCallbackDto: VulnerabilityReportImageDto | null = null;
  public isMainTableLoading: boolean = true;

  public detailsTableColumns: TrivyTableColumn[] = [];
  public detailsTableOptions: TrivyTableOptions;

  public isImageUsageDialogVisible: boolean = false;

  queryNamespaceName?: string;
  queryDigest?: string;
  isSingleMode: boolean = false;
  singleSelectDataDto?: VulnerabilityReportImageDto;

  constructor(private dataDtoService: VulnerabilityReportsService, private router: Router, private activatedRoute: ActivatedRoute) {
    this.activatedRoute.queryParamMap.subscribe(params => {
      this.queryNamespaceName = params.get('namespaceName') ?? undefined;
      this.queryDigest = params.get('digest') ?? undefined;
    });
    this.isSingleMode = this.queryNamespaceName && this.queryDigest ? true : false;

    this.mainTableColumns = [
      {
        field: 'resourceNamespace',
        header: 'NS',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'namespaces',
        style: 'width: 130px; max-width: 130px;',
        renderType: 'standard',
      },
      {
        field: 'imageName',
        header: 'Image Name - Tag',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 265px; max-width: 265px; white-space: normal;',
        renderType: 'imageNameTag',
        extraFields: ['imageTag', 'imageEosl'],
      },
      {
        field: 'criticalCount',
        header: 'C',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['0'],
      },
      {
        field: 'highCount',
        header: 'H',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px;',
        renderType: 'severityValue',
        extraFields: ['1'],
      },
      {
        field: 'mediumCount',
        header: 'M',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['2'],
      },
      {
        field: 'lowCount',
        header: 'L',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['3'],
      },
      {
        field: 'unknownCount',
        header: 'U',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 50px; max-width: 50px;',
        renderType: 'severityValue',
        extraFields: ['4'],
      },
    ];
    this.mainTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: !this.isSingleMode,
      isRefreshFilterable: !this.isSingleMode,
      isFooterVisible: false,
      tableSelectionMode: 'single',
      tableStyle: { width: '645px' },
      stateKey: 'Vulnerability Reports - Main',
      dataKey: 'uid',
      rowExpansionRender: 'table',
      extraClasses: 'trivy-half',
      multiHeaderActions: [{ label: "Go to SBOM" }],
    };
    this.detailsTableColumns = [
      {
        field: 'severityId',
        header: 'Sev',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'severities',
        style: 'width: 90px; max-width: 90px;',
        renderType: 'severityBadge',
      },
      {
        field: 'resource',
        header: 'Resource',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 130px; max-width: 130px',
        renderType: 'standard',
      },
      {
        field: 'title',
        header: 'Title',
        isFilterable: true,
        isSortable: false,
        multiSelectType: 'none',
        style: 'min-with: 200px; white-space: normal;',
        renderType: 'standard',
      },
      {
        field: 'installedVersion',
        header: 'Installed Ver',
        isFilterable: true,
        isSortable: false,
        multiSelectType: 'none',
        style: 'width: 120px; max-width: 120px',
        renderType: 'standard',
      },
      {
        field: 'fixedVersion',
        header: 'Fixed Ver',
        isFilterable: true,
        isSortable: false,
        multiSelectType: 'none',
        style: 'width: 120px; max-width: 120px',
        renderType: 'standard',
      },
      {
        field: 'publishedDate',
        header: 'Publish',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 900px; max-width: 90px',
        renderType: 'date',
      },
      {
        field: 'lastModifiedDate',
        header: 'Modif',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 90px; max-width: 90px',
        renderType: 'date',
      },
      {
        field: 'score',
        header: 'Score',
        isFilterable: false,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 70px; max-width: 70px',
        renderType: 'standard',
      },
      {
        field: 'vulnerabilityId',
        header: 'CVE',
        isFilterable: true,
        isSortable: true,
        multiSelectType: 'none',
        style: 'width: 150px; max-width: 150px;',
        renderType: 'link',
        extraFields: ['primaryLink'],
      },
    ];
    this.detailsTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      isRefreshVisible: false,
      isRefreshFilterable: false,
      isFooterVisible: false,
      tableSelectionMode: null,
      tableStyle: {},
      stateKey: 'Vulnerability Reports - Details',
      dataKey: null,
      rowExpansionRender: null,
      extraClasses: 'trivy-half',
    };
    this.mainTableExpandTableOptions = new TrivyExpandTableOptions(false, 2, 5);
  }

  ngOnInit() {
    this.dataDtoService
      .getVulnerabilityReportImageDtos({ digest: this.queryDigest, namespaceName: this.queryNamespaceName })
      .subscribe({
        next: (res) => this.onGetDataDtos(res),
        error: (err) => console.error(err),
    });
    this.dataDtoService.getVulnerabilityReportActiveNamespaces().subscribe({
      next: (res) => this.onGetActiveNamespaces(res),
      error: (err) => console.error(err),
    });
  }

  onGetDataDtos(vrDtos: VulnerabilityReportImageDto[]) {
    this.dataDtos = vrDtos;
    if (this.isSingleMode) {
      this.singleSelectDataDto = vrDtos[0];
    }
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => (x > y ? 1 : -1));
  }

  onMainTableExpandCallback(dto: VulnerabilityReportImageDto) {
    this.mainTableExpandCallbackDto = dto;
    this.isImageUsageDialogVisible = true;
  }

  public onRefreshRequested(event: TrivyFilterData) {
    const excludedSeverities =
      SeverityUtils.getSeverityIds().filter((severityId) => !event.selectedSeverityIds.includes(severityId)) || [];

    const params: GetVulnerabilityReportImageDtos$Params = {
      namespaceName: event.namespaceName ?? undefined,
      excludedSeverities: excludedSeverities.length > 0 ? excludedSeverities.join(',') : undefined,
    };
    this.isMainTableLoading = true;
    this.dataDtoService.getVulnerabilityReportImageDtos(params).subscribe({
      next: (res) => this.onGetDataDtos(res),
      error: (err) => console.error(err),
    });
  }

  mainTableExpandCellOptions(
    dto: VulnerabilityReportImageDto,
    type: 'header' | 'row',
    colIndex: number,
    rowIndex?: number,
  ): TrivyTableCellCustomOptions {
    rowIndex ?? 0;
    let celValue: string = '';
    let celStyle: string = '';
    let celBadge: string | undefined;
    let celButtonLink: string | undefined;
    let celUrl: string | undefined;
    let celLocalTime: string | undefined;

    switch (colIndex) {
      case 0:
        celStyle = 'width: 70px; min-width: 70px; height: 50px';
        switch (rowIndex) {
          case 0:
            celValue = 'Image Digest';
            break;
          case 1:
            celValue = 'Repository';
            break;
          case 2:
            celValue = 'Update Moment';
            break;
          case 3:
            celValue = 'Used By';
            break;
          case 4:
            celValue = 'OS Family';
            break;
        }
        break;
      case 1:
        celStyle = 'white-space: normal; display: flex; align-items: center; height: 50px;';
        switch (rowIndex) {
          case 0:
            celValue = dto.imageDigest ?? '';
            break;
          case 1:
            celValue = dto.imageRepository ?? '';
            break;
          case 2:
            celValue = '';
            celLocalTime = dto.updateTimestamp;
            break;
          case 3:
            const resourceNames: string[] = dto!.resources!.map((x) => x.name!);
            let narrowedResourceNames: string;
            let narrowedResourceNamesLink: string | null = null;
            if (resourceNames.length > 2) {
              narrowedResourceNames = resourceNames[0] + ', ' + resourceNames[1];
              narrowedResourceNamesLink = ' [+' + (resourceNames.length - 2) + ']';
            } else {
              narrowedResourceNames = resourceNames.join(', ');
              narrowedResourceNamesLink = '[...]';
            }
            celValue = narrowedResourceNames;
            celButtonLink = narrowedResourceNamesLink;
            break;
          case 4:
            celValue = dto.imageOsFamily! + ' - ' + dto.imageOsName!;
            celBadge = dto.imageEosl ? 'End of Service Life' : undefined;
            break;
        }
        break;
    }

    return {
      value: celValue,
      style: celStyle,
      badge: celBadge,
      buttonLink: celButtonLink,
      url: celUrl,
      localTime: celLocalTime,
    };
  }

  getPanelHeaderText() {
    return `Image Usage for ${this.mainTableExpandCallbackDto?.imageName}:${this.mainTableExpandCallbackDto?.imageTag} in namespace ${this.mainTableExpandCallbackDto?.resourceNamespace}`;
  }

  onMainTableMultiHeaderActionRequested(event: string) {
    switch (event) {
      case "Go to SBOM":
        this.goToSbom();
        break;
      default:
        console.error("sbom - multi action call back - unknown: " + event);
    }
  }

  goToSbom() {
    if (this.isSingleMode) {
      return;
    }
    const digest = this.selectedVulnerabilityReportDto?.imageDigest;
    const namespace = this.selectedVulnerabilityReportDto?.resourceNamespace;
    if (digest && namespace) {
      const url = this.router.serializeUrl(
        this.router.createUrlTree(['/sbom-reports'], { queryParams: { namespaceName: namespace, digest: digest } })
      );
      window.open(url, '_blank');
    }
  }

  onMainTableSelectedRowChanged(event: VulnerabilityReportImageDto | null) {
    this.selectedVulnerabilityReportDto = event;
  }
}
