import { Component, ViewChild } from '@angular/core';
import { ColDef, CsvExportParams, GridApi, GridReadyEvent, ValueGetterParams, } from "ag-grid-community";
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportSummaryDto } from "../../api/models/vulnerability-report-summary-dto";
import { VulnerabilityReportDto } from "../../api/models/vulnerability-report-dto"

import { ChartComponent } from "ng-apexcharts";
import { ApexNonAxisChartSeries, ApexResponsive, ApexChart } from "ng-apexcharts";

export type ChartOptions = {
  chart: ApexChart;
  responsive: ApexResponsive[];
  labels: any;
  colors: string[];
  legend: any;
};

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss'
})



export class VulnerabilityReportsComponent {
  public vulnerabilityReportSummaryDtos?: VulnerabilityReportSummaryDto[] | null | undefined;
  public vulnerabilityReportDtos?: VulnerabilityReportDto[] | null | undefined;
  public selectedVulnerabilityReportDto: VulnerabilityReportDto | null | undefined;
  public chartOptions: ChartOptions;
  public masterRowSelection: "single" | "multiple" = "single";
  public slaveColumnDefs: ColDef[] = [
    { headerName: 'severity', field: "severity", filter: true },
    { headerName: 'title', field: "title", filter: true },
   ];

  public masterColumnDefs: ColDef[] = [
    { headerName: 'Namespace', field: "resourceNamespace", filter: true, flex: 3 },
    {
      headerName: 'Image Name and Tag', field: "imageName", filter: true, flex: 9,
      valueGetter: (params: ValueGetterParams) =>
        params.data.imageName + ":" + params.data.imageTag,
    },
  ];

  private masterGridApi!: GridApi;
  private slaveGridApi!: GridApi;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService) {
    this.chartOptions = {
      chart: {
        //width: 200,
        type: "pie",
      },
      labels: ["Critical", "High", "Medium", "Low", "Unknown"],
      colors: [
        this.getCssVariableValue('--bs-danger'),
        this.getCssVariableValue('--bs-warning'),
        this.getCssVariableValue('--bs-secondary'),
        this.getCssVariableValue('--bs-info'),
        this.getCssVariableValue('--bs-primary')],
      responsive: [
        //{
        //  breakpoint: 480,
        //  options: {
        //    chart: {
        //      width: 200
        //    },
        //    legend: {
        //      position: "bottom"
        //    }
        //  }
        //}
      ],
      legend: { show: false },
    };
    vulnerabilityReportsService.getVulnerabilityReportSummaryDtos().subscribe(result => this.vulnerabilityReportSummaryDtos = result, error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportDtos().subscribe(result => this.vulnerabilityReportDtos = result, error => console.error(error));
  }

  getCssVariableValue(variableName: string): string {
    return getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
  }

  onMasterGridReady(params: GridReadyEvent) {
    this.masterGridApi = params.api;
  }

  onSlaveGridReady(params: GridReadyEvent) {
    this.slaveGridApi = params.api;
  }

  onMasterSelectionChanged(event: any) {
    const selectedRows = this.masterGridApi.getSelectedRows();
    this.selectedVulnerabilityReportDto = selectedRows[0] as VulnerabilityReportDto;
    //this.slaveGridApi.setGridOption('rowData', this.selectedVulnerabilityReportDto.vulnerabilities);
  }
}
