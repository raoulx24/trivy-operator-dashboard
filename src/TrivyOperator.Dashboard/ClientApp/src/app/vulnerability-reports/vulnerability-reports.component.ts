import { Component, ViewChild } from '@angular/core';
import { ColDef, GridApi, GridReadyEvent, ValueGetterParams, } from "ag-grid-community";
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportSummaryDto } from "../../api/models/vulnerability-report-summary-dto";
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { VulnerabilitySeverityRenderer } from "./vulnerability-severity-renderer.component";

import { ChartComponent } from "ng-apexcharts";
import { ApexNonAxisChartSeries, ApexResponsive, ApexChart } from "ng-apexcharts";

export type ChartOptions = {
  chart: ApexChart;
  responsive: ApexResponsive[];
  labels: any;
  colors: string[];
  legend: any;
};

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss'
})



export class VulnerabilityReportsComponent {
  public vulnerabilityReportSummaryDtos?: VulnerabilityReportSummaryDto[] | null | undefined;
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;
  public narrowedResourceNames: string | null | undefined;
  public chartOptions: ChartOptions;
  public masterRowSelection: "single" | "multiple" = "single";
  public slaveColumnDefs: ColDef[] = [
    {
      headerName: '',
      field: "severity",
      filter: true,
      width: 80,
      cellRenderer: VulnerabilitySeverityRenderer
    },
    { headerName: 'resource', field: "resource", filter: true, width: 130 },
    { headerName: 'title', field: "title", filter: true, width: 450, wrapText: true, autoHeight: true },
    { headerName: 'installedVersion', field: "installedVersion", width: 150 },
    { headerName: 'fixedVersion', field: "fixedVersion", width: 150 },
    { headerName: 'score', field: "score", width: 70 },
    {
      headerName: 'CVE', field: "vulnerabilityId", filter: true, width: 150,
      cellRenderer: (params: ValueGetterParams) => (`<a href="${params.data.primaryLink}" target="_blank">${params.data.vulnerabilityId}</a>`)
    },
   ];

  public masterColumnDefs: ColDef[] = [
    { headerName: 'NS', field: "resourceNamespace", filter: true, flex: 1, width: 100 },
    {
      headerName: 'Image Name and Tag', field: "imageName", filter: true, flex: 3.3, width: 330,
      valueGetter: (params: ValueGetterParams) =>
        params.data.imageName + ":" + params.data.imageTag,
    },
    {
      headerName: 'C H M L U', width: 160,
      cellRenderer: (params: ValueGetterParams) => (`
        <div class="d-flex justify-content-around align-items-center">
          <span class="badge rounded-pill text-bg-danger">${params.data.criticalCount}</span>
          <span class="badge rounded-pill text-bg-warning">${params.data.highCount}</span>
          <span class="badge rounded-pill text-bg-secondary">${params.data.mediumCount}</span>
          <span class="badge rounded-pill text-bg-info">${params.data.lowCount}</span>
        </div>
        `)
    },
  ];

  private masterGridApi!: GridApi;
  private slaveGridApi!: GridApi;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService) {
    this.chartOptions = {
      chart: {
        //width: 200,
        type: "pie",
      },
      labels: ["Critical", "High", "Medium", "Low", "Unknown"],
      colors: [
        this.getCssVariableValue('--bs-danger'),
        this.getCssVariableValue('--bs-warning'),
        this.getCssVariableValue('--bs-secondary'),
        this.getCssVariableValue('--bs-info'),
        this.getCssVariableValue('--bs-primary')],
      responsive: [
        //{
        //  breakpoint: 480,
        //  options: {
        //    chart: {
        //      width: 200
        //    },
        //    legend: {
        //      position: "bottom"
        //    }
        //  }
        //}
      ],
      legend: { show: false },
    };
    vulnerabilityReportsService.getVulnerabilityReportSummaryDtos().subscribe(result => this.vulnerabilityReportSummaryDtos = result, error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportImageDtos().subscribe(result => this.vulnerabilityReportDtos = result, error => console.error(error));
  }

  getCssVariableValue(variableName: string): string {
    return getComputedStyle(document.documentElement).getPropertyValue(variableName).trim();
  }

  onMasterGridReady(params: GridReadyEvent) {
    this.masterGridApi = params.api;
  }

  onSlaveGridReady(params: GridReadyEvent) {
    this.slaveGridApi = params.api;
  }

  onMasterSelectionChanged(event: any) {
    const selectedRows = this.masterGridApi.getSelectedRows();
    this.selectedVulnerabilityReportDto = selectedRows[0] as VulnerabilityReportImageDto;
    let mama: string[] = this.selectedVulnerabilityReportDto.resourceNames!;
    if (mama.length > 2) {
      this.narrowedResourceNames = mama[0] + ", " + mama[1] + " [... +" + (mama.length - 2) + "]";
    }
    else {
      this.narrowedResourceNames = mama.join(", ");
    }
    //this.slaveGridApi.setGridOption('rowData', this.selectedVulnerabilityReportDto.vulnerabilities);
  }
}
