import { Component } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportImageDto } from "../../api/models/vulnerability-report-image-dto"
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { Column, ExportColumn, TrivyTableColumn, TrivyTableOptions } from "../trivy-table/trivy-table.types";


export type DetailsKeyValue = {
  detailKey: string,
  detailValue: string | null,
}

@Component({
  selector: 'app-vulnerability-reports',
  templateUrl: './vulnerability-reports.component.html',
  styleUrl: './vulnerability-reports.component.scss',
  providers: [SeverityHelperService],
})

export class VulnerabilityReportsComponent {
  public vulnerabilityReportDtos?: VulnerabilityReportImageDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  public selectedVulnerabilityReportDto: VulnerabilityReportImageDto | null | undefined;
  public narrowedResourceNames: string | null | undefined;

  public masterTableColumns!: Column[];
  public masterTrivyTableColumns: TrivyTableColumn[] = [];
  public masterTrivyTableOptions: TrivyTableOptions;

  public slaveTableColumns!: Column[];
  public slaveTrivyTableColumns: TrivyTableColumn[] = [];
  public slaveTrivyTableOptions: TrivyTableOptions;

  // ag grid
  public detailsKeyValues: DetailsKeyValue[] = [];

  public get severityHelper(): SeverityHelperService {
    return this._severityHelper;
  };
  private set severityHelper(severityHelper: SeverityHelperService) {
    this._severityHelper = severityHelper;
    this._severityHelper.getSeverityDtos().then(result => this.onGetSeverities(result));
  }
  private _severityHelper!: SeverityHelperService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService) {
    vulnerabilityReportsService.getVulnerabilityReportImageDtos().subscribe(result => this.vulnerabilityReportDtos = result, error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));
    this.severityHelper = severityHelperService;

    this.masterTableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'criticalCount', header: 'C H M L U' },
    ];

    this.masterTrivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "white-space: normal;", renderType: "imageNameTag",
        extraFields: ["imageTag"],
      },
      {
        field: "criticalCount", header: "C H M L U",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 170px; max-width: 170px; ", renderType: "severityMultiTags",
        extraFields: ["highCount", "mediumCount", "lowCount","unknownCount"],
      },
    ]

    this.masterTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      tableSelectionMode: "single",
      tableHeight: "70vh",
      exposeSelectedRowsEvent: true,
      ifFooterVisible: true,
    };

    this.slaveTableColumns = [
      { field: 'severityId', header: 'Sev' },
      { field: 'resource', header: 'Resource' },
      { field: 'title', header: 'Title' },
      { field: 'installedVersion', header: 'Installed Version' },
      { field: 'fixedVersion', header: 'Fixed Version' },
      { field: 'score', header: 'Score' },
      { field: 'vulnerabilityId', header: 'CVE' },
    ];

    this.slaveTrivyTableColumns = [
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 90px; max-width: 90px;", renderType: "severityBadge",
      },
      {
        field: "resource", header: "Resource",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 130px; max-width: 130px", renderType: "standard",
      },
      {
        field: "title", header: "Title",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "white-space: normal;", renderType: "standard",
      },
      {
        field: "installedVersion", header: "Installed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "fixedVersion", header: "Fixed Ver",
        isFiltrable: true, isSortable: false, multiSelectType: "none",
        style: "width: 120px; max-width: 120px", renderType: "standard",
      },
      {
        field: "score", header: "Score",
        isFiltrable: false, isSortable: true, multiSelectType: "none",
        style: "width: 70px; max-width: 70px", renderType: "standard",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 150px; max-width: 150px;", renderType: "link",
        extraFields: ["primaryLink"],
      },
    ];

    this.slaveTrivyTableOptions = {
      isClearSelectionVisible: false,
      isExportCsvVisible: false,
      isResetFiltersVisible: true,
      tableSelectionMode: null,
      tableHeight: "664px",
      exposeSelectedRowsEvent: false,
      ifFooterVisible: false,
    };
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    console.log("vrd - onGetSeverities - severityDtos " + severityDtos);
    this.severityDtos = severityDtos;
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  onSelectionChange(event: VulnerabilityReportImageDto[]) {
    console.log('VR - onSelectionChange - Selected row:', event);
    if (event == null || event.length == 0)
    {
      this.selectedVulnerabilityReportDto = null;
      return;
    }
    this.selectedVulnerabilityReportDto = event[0];
    if (this.selectedVulnerabilityReportDto == undefined) {
      return;
    }

    this.detailsKeyValues = [];
    let aDetailsKeyValue: DetailsKeyValue = {
      detailKey: 'Repository', detailValue: this.selectedVulnerabilityReportDto.imageRepository!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    let resourceNames: string[] = this.selectedVulnerabilityReportDto!.resources!.map(x => x.name!);
    if (resourceNames.length > 2) {
      this.narrowedResourceNames = resourceNames[0] + ", " + resourceNames[1] + " [+" + (resourceNames.length - 2) + "]";
    }
    else {
      this.narrowedResourceNames = resourceNames.join(", ");
    }
    aDetailsKeyValue = {
      detailKey: 'Used By', detailValue: this.narrowedResourceNames
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Family', detailValue: this.selectedVulnerabilityReportDto.imageOsFamily!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
    aDetailsKeyValue = {
      detailKey: 'OS Name', detailValue: this.selectedVulnerabilityReportDto.imageOsName!
    };
    this.detailsKeyValues.push(aDetailsKeyValue);
  }
}
