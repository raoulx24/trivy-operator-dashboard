import { Component } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportDenormalizedDto } from "../../api/models/vulnerability-report-denormalized-dto";
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { TrivyTableComponent } from '../trivy-table/trivy-table.component';
import { Column, ExportColumn, TrivyTableColumn, TrivyTableOptions } from "../trivy-table/trivy-table.types";

@Component({
  selector: 'app-vulnerability-reports-detailed',
  standalone: true,
  imports: [TrivyTableComponent],
  templateUrl: './vulnerability-reports-detailed.component.html',
  styleUrl: './vulnerability-reports-detailed.component.css',
})

export class VulnerabilityReportsDetailedComponent {
  
  public rowSelection: "single" | "multiple" = "multiple";
  public vulnerabilityReportsDetailedDtos?: VulnerabilityReportDenormalizedDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  public isLoading: boolean = false;

  public csvFileName: string = "Vulnerability.Reports";

  public exportCoumns!: ExportColumn[];
  public tableColumns!: Column[];

  public trivyTableColumns: TrivyTableColumn[] = [];
  public trivyTableOptions: TrivyTableOptions;

  constructor(private vulnerabilityReportsService: VulnerabilityReportsService) {
    this.getTableDataDtos();

    this.tableColumns = [
      { field: 'publishedDate', header: 'publishedDate' },
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'resourceContainerName', header: 'Container' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'severityId', header: 'SeverityId' },
    ];

    this.exportCoumns = [
      { title: 'Published Date', dataKey: 'publishedDate' },
      { title: 'Namespace', dataKey: 'resourceNamespace' },
      { title: 'Container', dataKey: 'resourceContainerName' },
      { title: 'ImageName', dataKey: 'imageName' },
      { title: 'ImageTag', dataKey: 'imageTag' },
      { title: 'SeverityId', dataKey: 'severityId' },
    ];

    this.trivyTableColumns = [
      {
        field: "publishedDate", header: "publishedDate",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 130px; max-width: 200px;", renderType: "date",
      },
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "resourceContainerName", header: "Container",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 170px; max-width: 170px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 330px; max-width: 330px;", renderType: "imageNameTag",
        extraFields: ["imageTag", "imageEosl"],
      },
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 125px; max-width: 125px;", renderType: "severityBadge",
      },
      {
        field: "title", header: "Title",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "white-space: normal;", renderType: "standard",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 150px; max-width: 150px;", renderType: "link",
        extraFields: ["primaryLink"],

      },
    ]

    this.trivyTableOptions = {
      isClearSelectionVisible: true,
      isExportCsvVisible: true,
      isResetFiltersVisible: true,
      isRefreshVisible: true,
      isRefreshFiltrable: false,
      isFooterVisible: true,
      tableSelectionMode: null,
      stateKey: "vrd.table-all",
      dataKey: null,
    };
  }

  public getTableDataDtos() {
    this.isLoading = true;
    this.vulnerabilityReportsService.getVulnerabilityReportDenormalizedDto()
      .subscribe({
        next: (res) => this.onGetVulnerabilityReportDenormalizedDto(res),
        error: (err) => console.error(err)
      });
    this.vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces()
      .subscribe({
        next: (res) => this.onGetActiveNamespaces(res),
        error: (err) => console.error(err)
      })
  }

  onGetVulnerabilityReportDenormalizedDto(dtos: VulnerabilityReportDenormalizedDto[]) {
    this.vulnerabilityReportsDetailedDtos = dtos;
    this.isLoading = false;
  }

  onGetActiveNamespaces(dtos: string[]) {
    this.activeNamespaces = dtos.sort((x, y) => x > y ? 1 : -1);
  }
}
