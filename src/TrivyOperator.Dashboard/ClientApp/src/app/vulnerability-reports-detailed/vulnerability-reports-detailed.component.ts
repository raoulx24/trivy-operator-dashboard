import { Component, ViewChild } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportDenormalizedDto } from "../../api/models/vulnerability-report-denormalized-dto";
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"
import { MenuItem } from 'primeng/api';
import { Table } from 'primeng/table';

export type TrivyTableOptions = {
  isClearSelectionVisible: boolean,
  isResetFiltersVisible: boolean,
  isExportCsvVisible: boolean,
  tableSelectionMode: null | "single" | "multiple"
}

interface Column {
  field: string;
  header: string;
  customExportHeader?: string;
}

interface ExportColumn {
  title: string;
  dataKey: string;
}

interface TrivyTableColumn extends Column {
  isSortable: boolean;
  isFiltrable: boolean;
  style: string;
  multiSelectType: "" | "namespaces" | "severities";
  isSeverityBadge?: boolean;
  isImageNameTag?: boolean;
  isLink?: boolean;
  extraFields?: string[];
}

@Component({
  selector: 'app-vulnerability-reports-detailed',
  templateUrl: './vulnerability-reports-detailed.component.html',
  styleUrl: './vulnerability-reports-detailed.component.css',
  providers: [SeverityHelperService],
})

export class VulnerabilityReportsDetailedComponent {
  
  public rowSelection: "single" | "multiple" = "multiple";
  public vulnerabilityReportsDetailedDtos?: VulnerabilityReportDenormalizedDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  
  public filterSeverityOptions: number[] = []
  public filterSelectedSeverityIds: number[] | null = [];
  public filterActiveNamespaces: string[] | null = [];

  public selectedVrdDtos!: VulnerabilityReportDenormalizedDto[];
  public metaKey: boolean = false;
  public csvFileName: string = "Vulnerability.Reports";

  public exportCoumns!: ExportColumn[];
  public tableColumns!: Column[];
  public saveCsvMenuItems!: MenuItem[];
  @ViewChild('trivyTable') trivyTable?: Table;

  public trivyTableColumns: TrivyTableColumn[] = [];
  public trivyTableOptions: TrivyTableOptions;


  public get severityHelper(): SeverityHelperService {
    return this._severityHelper;
  };
  private set severityHelper(severityHelper: SeverityHelperService) {
    this._severityHelper = severityHelper;
    this._severityHelper.getSeverityDtos().then(result => this.onGetSeverities(result));
  }
  private _severityHelper!: SeverityHelperService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService) {
    vulnerabilityReportsService.getVulnerabilityReportDenormalizedDto().subscribe(result => this.vulnerabilityReportsDetailedDtos = result, error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));
    //this._severityHelper = severityHelperService;
    this.severityHelper = severityHelperService;

    this.tableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'resourceContainerName', header: 'Container' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'severityId', header: 'SeverityId' },
    ];

    this.exportCoumns = [
      { title: 'Namespace', dataKey: 'resourceNamespace' },
      { title: 'Container', dataKey: 'resourceContainerName' },
      { title: 'ImageName', dataKey: 'imageName' },
      { title: 'ImageTag', dataKey: 'imageTag' },
      { title: 'SeverityId', dataKey: 'severityId' },
    ];

    //this.saveCsvMenuItems = [
    //  { label: 'Export All to CSV', command: () => { if (this.vrdTable != null) this.vrdTable.exportCSV({ allValues: true }) } },
    //  { label: 'Export Selected to CSV', command: () => { if (this.vrdTable != null) this.vrdTable.exportCSV({ selectionOnly: true }) } },
    //];

    this.trivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", 
      },
      {
        field: "resourceContainerName", header: "Container",
        isFiltrable: true, isSortable: true, multiSelectType: "",
        style: "width: 170px; max-width: 170px;",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "",
        style: "width: 330px; max-width: 330px;",
        isImageNameTag: true, extraFields: ["imageTag"],
      },
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 125px; max-width: 125px; ",
        isSeverityBadge: true,
      },
      {
        field: "title", header: "Title",
        isFiltrable: false, isSortable: false, multiSelectType: "",
        style: "white-space: normal;",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: false, isSortable: false, multiSelectType: "",
        style: "width: 150px; max-width: 150px;",
        isLink: true, extraFields: ["primaryLink"],

      },
    ]

    this.trivyTableOptions = {
      isClearSelectionVisible: true,
      isExportCsvVisible: true,
      isResetFiltersVisible: true,
      tableSelectionMode: "multiple"
    };
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    console.log("vrd - onGetSeverities - severityDtos " + severityDtos);
    this.severityDtos = severityDtos;
    severityDtos.forEach((x) => { this.filterSeverityOptions.push(x.id); })
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  public getTableFooterInfo(): string {
    if (this.trivyTable == null) {
      return "";
    }
    let selectedRecords: number = this.trivyTable.selection ? this.trivyTable.selection.length : 0;
    let totalRecords: number = this.vulnerabilityReportsDetailedDtos ? this.vulnerabilityReportsDetailedDtos.length : 0;
    if (this.trivyTable.filteredValue) {
      return `Filtered ${this.trivyTable.filteredValue.length} out of ${totalRecords}. Selected: ${selectedRecords}.`;
    }

    return `Total records: ${totalRecords}. Selected: ${selectedRecords}.`;
  }

  public onTableClearSelected() {
    this.selectedVrdDtos = [];
  }

  public isTableRowSelected(): boolean {
    return this.selectedVrdDtos ? this.selectedVrdDtos.length > 0 : false;
  }

  //public onTableExportFiltered() {
  //  if (this.trivyTable == null) {
  //    return;
  //  }

  //  this.trivyTable.exportCSV({ selectionOnly: true })
  //}
}

// clear filters on reset table: https://stackoverflow.com/questions/51395624/reset-filter-value-on-primeng-table
