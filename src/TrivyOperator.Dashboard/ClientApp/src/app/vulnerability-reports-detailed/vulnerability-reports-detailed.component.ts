import { Component, ViewChild } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportDenormalizedDto } from "../../api/models/vulnerability-report-denormalized-dto";
import { SeveritiesService } from "../../api/services/severities.service"
import { SeverityDto } from "../../api/models/severity-dto"
import { Severity } from '../../utils/severity-colors';
import { MenuItem } from 'primeng/api';
import { Table } from 'primeng/table';

interface Column {
  field: string;
  header: string;
  customExportHeader?: string;
}

interface ExportColumn {
  title: string;
  dataKey: string;
}

@Component({
  selector: 'app-vulnerability-reports-detailed',
  templateUrl: './vulnerability-reports-detailed.component.html',
  styleUrl: './vulnerability-reports-detailed.component.css',
})

export class VulnerabilityReportsDetailedComponent {
  public rowSelection: "single" | "multiple" = "multiple";
  public vulnerabilityReportsDetailedDtos?: VulnerabilityReportDenormalizedDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  
  public filterSeverityOptions: number[] = []
  public filterSelectedSeverityIds: number[] | null = [];
  public filterActiveNamespaces: string[] | null = [];

  public selectedVrdDtos!: VulnerabilityReportDenormalizedDto[];
  public metaKey: boolean = false;
  public csvFileName: string = "Vulnerability.Reports";

  public exportCoumns!: ExportColumn[];
  public tableColumns!: Column[];
  public saveCsvMenuItems!: MenuItem[];
  @ViewChild('vrdTable') vrdTable?: Table;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severitiesService: SeveritiesService) {
    vulnerabilityReportsService.getVulnerabilityReportDenormalizedDto().subscribe(result => this.vulnerabilityReportsDetailedDtos = result, error => console.error(error));
    severitiesService.getSeverities().subscribe(result => this.onGetSeverities(result), error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));

    this.tableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'resourceContainerName', header: 'Container' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'severityId', header: 'SeverityId' },
    ];

    this.exportCoumns = [
      { title: 'Namespace', dataKey: 'resourceNamespace' },
      { title: 'Container', dataKey: 'resourceContainerName' },
      { title: 'ImageName', dataKey: 'imageName' },
      { title: 'ImageTag', dataKey: 'imageTag' },
      { title: 'SeverityId', dataKey: 'severityId' },
    ];

    this.saveCsvMenuItems = [
      { label: 'Export All to CSV', command: () => { if (this.vrdTable != null) this.vrdTable.exportCSV({ allValues: true }) } },
      { label: 'Export Selected to CSV', command: () => { if (this.vrdTable != null) this.vrdTable.exportCSV({ selectionOnly: true }) } },
    ];
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    this.severityDtos = severityDtos;
    severityDtos.forEach((x) => { this.filterSeverityOptions.push(x.id); })
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  public getSeverityCssColor(severityId: number): string {
    return Severity.GetCssColor(severityId);
  }

  public getSeverityName(severityId: number): string {
    if (this.severityDtos == null) {
      return "";
    }
    for (let severity of this.severityDtos) {
      if (severity.id == severityId) {
        return severity.name;
      }
    }
    return "";
  }

  public getSeverityShortName(severityId: number): string {
    return Severity.GetShortName(severityId);
  }

  public getSeverityIndex(severityName: string, severityDtos: SeverityDto[]): number {
    return Severity.GetSeverityIndex(severityName, severityDtos);
  }

  public getSeverityCssColors(severities: number[], maxDisplay: number): string {
    
    if (severities == null) {
      console.log("severities is null or undefined");
      return "null baby";
    }

    if (severities.length == 0) {
      console.log("severities is empty");
      return "Any"
    }

    if (severities.length > maxDisplay) {
      return `${severities.length} selected`
    }
    else {
      let selectedSeverityNames: string[] = [];
      severities.forEach((x) => { selectedSeverityNames.push(this.getSeverityName(x)); });
      return selectedSeverityNames.join(", ");
    }
  }

  public getTableFooterInfo(): string {
    if (this.vrdTable == null) {
      return "";
    }
    let selectedRecords: number = this.vrdTable.selection ? this.vrdTable.selection.length : 0;
    let totalRecords: number = this.vulnerabilityReportsDetailedDtos ? this.vulnerabilityReportsDetailedDtos.length : 0;
    if (this.vrdTable.filteredValue) {
      return `Filtered ${this.vrdTable.filteredValue.length} out of ${totalRecords}. Selected: ${selectedRecords}.`;
    }

    return `Total records: ${totalRecords}. Selected: ${selectedRecords}.`;
  }
}
