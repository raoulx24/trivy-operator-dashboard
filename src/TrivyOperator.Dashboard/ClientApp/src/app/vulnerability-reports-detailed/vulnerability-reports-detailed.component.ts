import { Component } from '@angular/core';
import { ColDef, CsvExportParams, GridApi, GridReadyEvent, ValueGetterParams, } from "ag-grid-community";
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportDenormalizedDto } from "../../api/models/vulnerability-report-denormalized-dto";
import { SeveritiesService } from "../../api/services/severities.service"
import { SeverityDto } from "../../api/models/severity-dto"
import { VulnerabilitySeverityRenderer } from "./vulnerability-severity-renderer.component";
import { Severity } from '../../utils/severity-colors';

@Component({
  selector: 'app-vulnerability-reports-detailed',
  templateUrl: './vulnerability-reports-detailed.component.html',
  styleUrl: './vulnerability-reports-detailed.component.css',
})

export class VulnerabilityReportsDetailedComponent {
  public rowSelection: "single" | "multiple" = "multiple";
  public vulnerabilityReportsDetailedDtos?: VulnerabilityReportDenormalizedDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public columnDefs: ColDef[] = [
    { headerName: 'Namespace', field: "resourceNamespace", filter: true, flex: 3},
    { headerName: 'Container', field: "resourceContainerName", filter: true, flex: 3},
    {
      headerName: 'Image Name and Tag', field: "imageName", filter: true, flex: 9,
      valueGetter: (params: ValueGetterParams) =>
        params.data.imageName + ":" + params.data.imageTag,
    },
    {
      headerName: '',
      field: "severity",
      filter: true,
      flex: 1,
      minWidth: 80,
      cellRenderer: VulnerabilitySeverityRenderer
    },
    {headerName: 'Title', field: "title", filter: true, flex: 15, wrapText: true, autoHeight: true},
    {
      headerName: 'CVE', field: "vulnerabilityId", filter: true, flex: 6,
      cellRenderer: (params: ValueGetterParams) => (`<a href="${params.data.primaryLink}" target="_blank">${params.data.vulnerabilityId}</a>`)
    },
  ];
  public defaultColDef: ColDef = {
    floatingFilter: true,
    suppressFloatingFilterButton: true,
  };
  private gridExportParams: CsvExportParams = {columnSeparator: ",", onlySelected: true};
  private gridApi!: GridApi;

  public testDropdown: number[] = []
  public selectedTest: number[] | null = [];

  public selectedVulnerabilityReportsDetailedDtos!: VulnerabilityReportDenormalizedDto[];
  public metaKey: boolean = false;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severitiesService: SeveritiesService) {
    vulnerabilityReportsService.getVulnerabilityReportDenormalizedDto().subscribe(result => this.vulnerabilityReportsDetailedDtos = result, error => console.error(error))
    severitiesService.getSeverities().subscribe(result => this.onGetSeverities(result), error => console.error(error))
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    this.severityDtos = severityDtos;
    severityDtos.forEach((x) => { this.testDropdown.push(x.id); })
  }

  onBtnExport() {
    this.gridApi.exportDataAsCsv(this.gridExportParams);
  }

  onGridReady(params: GridReadyEvent) {
    this.gridApi = params.api;
  }

  public getSeverityCssColor(severityId: number): string {
    return Severity.GetCssColor(severityId);
  }

  public getSeverityName(severityId: number): string {
    if (this.severityDtos == null) {
      return "";
    }
    for (let severity of this.severityDtos) {
      if (severity.id == severityId) {
        return severity.name;
      }
    }
    return "";
  }

  public getSeverityShortName(severityId: number): string {
    return Severity.GetShortName(severityId);
  }

  public getSeverityIndex(severityName: string, severityDtos: SeverityDto[]): number {
    return Severity.GetSeverityIndex(severityName, severityDtos);
  }

  public getSeverityCssColors(severities: number[], maxDisplay: number): string {
    
    if (severities == null) {
      console.log("xxx");
      return "null baby";
    }

    if (severities.length == 0) {
      return "Select Severities"
    }

    let cssColors: string[] = [];
    severities.forEach((x) => { cssColors.push(this.getSeverityCssColor(x)) });

    //return cssColors.join(", ");
    return `${severities.length} selected`
  }
}
