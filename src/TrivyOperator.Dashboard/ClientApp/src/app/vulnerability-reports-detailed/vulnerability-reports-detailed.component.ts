import { Component } from '@angular/core';
import { VulnerabilityReportsService } from "../../api/services/vulnerability-reports.service";
import { VulnerabilityReportDenormalizedDto } from "../../api/models/vulnerability-report-denormalized-dto";
import { SeverityHelperService } from "../services/severity-helper.service"
import { SeverityDto } from "../../api/models/severity-dto"

import { Column, ExportColumn, TrivyTableColumn, TrivyTableOptions } from "../trivy-table/trivy-table.types";

@Component({
  selector: 'app-vulnerability-reports-detailed',
  templateUrl: './vulnerability-reports-detailed.component.html',
  styleUrl: './vulnerability-reports-detailed.component.css',
  providers: [SeverityHelperService],
})

export class VulnerabilityReportsDetailedComponent {
  
  public rowSelection: "single" | "multiple" = "multiple";
  public vulnerabilityReportsDetailedDtos?: VulnerabilityReportDenormalizedDto[] | null | undefined;
  public severityDtos?: SeverityDto[] | null | undefined;
  public activeNamespaces?: string[] | null | undefined = [];
  
  //public filterSeverityOptions: number[] = []
  //public filterSelectedSeverityIds: number[] | null = [];
  //public filterActiveNamespaces: string[] | null = [];

  public csvFileName: string = "Vulnerability.Reports";

  public exportCoumns!: ExportColumn[];
  public tableColumns!: Column[];

  public trivyTableColumns: TrivyTableColumn[] = [];
  public trivyTableOptions: TrivyTableOptions;

  public get severityHelper(): SeverityHelperService {
    return this._severityHelper;
  };
  private set severityHelper(severityHelper: SeverityHelperService) {
    this._severityHelper = severityHelper;
    this._severityHelper.getSeverityDtos().then(result => this.onGetSeverities(result));
  }
  private _severityHelper!: SeverityHelperService;

  constructor(vulnerabilityReportsService: VulnerabilityReportsService, severityHelperService: SeverityHelperService) {
    vulnerabilityReportsService.getVulnerabilityReportDenormalizedDto().subscribe(result => this.vulnerabilityReportsDetailedDtos = result, error => console.error(error));
    vulnerabilityReportsService.getVulnerabilityReportActiveNamespaces().subscribe(result => this.onGetActiveNamespaces(result), error => console.error(error));
    //this._severityHelper = severityHelperService;
    this.severityHelper = severityHelperService;

    this.tableColumns = [
      { field: 'resourceNamespace', header: 'NS' },
      { field: 'resourceContainerName', header: 'Container' },
      { field: 'imageName', header: 'ImageName' },
      { field: 'imageTag', header: 'ImageTag' },
      { field: 'severityId', header: 'SeverityId' },
    ];

    this.exportCoumns = [
      { title: 'Namespace', dataKey: 'resourceNamespace' },
      { title: 'Container', dataKey: 'resourceContainerName' },
      { title: 'ImageName', dataKey: 'imageName' },
      { title: 'ImageTag', dataKey: 'imageTag' },
      { title: 'SeverityId', dataKey: 'severityId' },
    ];

    this.trivyTableColumns = [
      {
        field: "resourceNamespace", header: "NS",
        isFiltrable: true, isSortable: true, multiSelectType: "namespaces",
        style: "width: 130px; max-width: 130px;", renderType: "standard",
      },
      {
        field: "resourceContainerName", header: "Container",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 170px; max-width: 170px;", renderType: "standard",
      },
      {
        field: "imageName", header: "Image Name - Tag",
        isFiltrable: true, isSortable: true, multiSelectType: "none",
        style: "width: 330px; max-width: 330px;", renderType: "imageNameTag",
        extraFields: ["imageTag"],
      },
      {
        field: "severityId", header: "Sev",
        isFiltrable: true, isSortable: true, multiSelectType: "severities",
        style: "width: 125px; max-width: 125px;", renderType: "severityBadge",
      },
      {
        field: "title", header: "Title",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "white-space: normal;", renderType: "standard",
      },
      {
        field: "vulnerabilityId", header: "CVE",
        isFiltrable: false, isSortable: false, multiSelectType: "none",
        style: "width: 150px; max-width: 150px;", renderType: "link",
        extraFields: ["primaryLink"],

      },
    ]

    this.trivyTableOptions = {
      isClearSelectionVisible: true,
      isExportCsvVisible: true,
      isResetFiltersVisible: true,
      isRefreshVisible: true,
      isRefreshFiltrable: false,
      tableSelectionMode: "multiple",
      tableHeight: "70vh",
      exposeSelectedRowsEvent: false,
      ifFooterVisible: true,
    };
  }

  onGetSeverities(severityDtos: SeverityDto[]) {
    this.severityDtos = severityDtos;
    //severityDtos.forEach((x) => { this.filterSeverityOptions.push(x.id); })
  }

  onGetActiveNamespaces(activeNamespaces: string[]) {
    this.activeNamespaces = activeNamespaces.sort((x, y) => x > y ? 1 : -1);
  }

  // for other implementations, to be romoved after implementation in VR component
  // together with (selectedRowsChanged)="onSelectionChange($event)" in html
  //onSelectionChange(event: VulnerabilityReportDenormalizedDto[]): void {
  //  console.log('VRD - onSelectionChange - Selected row:', event);
  //}
}
