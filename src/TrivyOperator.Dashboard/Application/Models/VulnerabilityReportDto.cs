using System.ComponentModel.DataAnnotations;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Utils;

namespace TrivyOperator.Dashboard.Application.Models;

public class VulnerabilityReportDto
{
    public Guid Uid { get; init; } = Guid.NewGuid();
    public string? ResourceName { get; init; }
    public string? ResourceNamespace { get; init; }
    public string? ResourceKind { get; init; }
    public string? ResourceContainerName { get; init; }
    public string? ImageName { get; init; }
    public string? ImageTag { get; init; }
    public string? ImageDigest { get; init; }
    public string? ImageRepository { get; init; }
    public string? ImageOsFamily { get; init; }
    public string? ImageOsName { get; init; }
    public bool? ImageEosl { get; init; }
    public long CriticalCount { get; init; }
    public long HighCount { get; init; }
    public long MediumCount { get; init; }
    public long LowCount { get; init; }
    public long UnknownCount { get; init; }
    public DateTime UpdateTimestamp { get; set; }
    public VulnerabilityReportDetailDto[]? Details { get; init; }
}

public class VulnerabilityReportImageDto
{
    public Guid Uid { get; set; } = new Guid();
    public string ResourceNamespace { get; init; } = string.Empty;
    public string ImageName { get; init; } = string.Empty;
    public string ImageTag { get; init; } = string.Empty;
    public string ImageDigest { get; init; } = string.Empty;
    public string ImageRepository { get; init; } = string.Empty;
    public string ImageOsFamily { get; init; } = string.Empty;
    public string ImageOsName { get; init; } = string.Empty;
    public bool? ImageEosl { get; init; }
    public List<VulnerabilityReportImageResourceDto> Resources { get; init; } = [];
    public long CriticalCount { get; init; }
    public long HighCount { get; init; }
    public long MediumCount { get; init; }
    public long LowCount { get; init; }
    public long UnknownCount { get; init; }
    public DateTime UpdateTimestamp { get; set; }
    public VulnerabilityReportDetailDto[] Details { get; set; } = [];
}

public class VulnerabilityReportImageResourceDto
{
    public string Name { get; init; } = string.Empty;
    public string Kind { get; init; } = string.Empty;
    public string ContainerName { get; init; } = string.Empty;
}

public class VulnerabilityReportDetailDto
{
    public Guid Id => GuidUtils.GetDeterministicGuid($"{VulnerabilityId}{Resource}{InstalledVersion}");
    public Guid MatchKey => GuidUtils.GetDeterministicGuid($"{VulnerabilityId}{Resource}");
    public string FixedVersion { get; init; } = string.Empty;
    public string InstalledVersion { get; init; } = string.Empty;
    public DateTime? LastModifiedDate { get; init; }
    public Uri? PrimaryLink { get; init; }
    public DateTime? PublishedDate { get; set; }
    public string Resource { get; set; } = string.Empty;
    public float Score { get; set; }
    public int SeverityId { get; set; }
    public string Target { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string VulnerabilityId { get; set; } = string.Empty;
}

public class VulnerabilityReportDenormalizedDto
{
    public Guid Uid => Guid.NewGuid();
    public string ResourceName { get; init; } = string.Empty;
    public string ResourceNamespace { get; init; } = string.Empty;
    public string ResourceKind { get; init; } = string.Empty;
    public string ResourceContainerName { get; init; } = string.Empty;
    public string ImageName { get; init; } = string.Empty;
    public string ImageTag { get; init; } = string.Empty;
    public string ImageDigest { get; init; } = string.Empty;
    public string ImageRepository { get; init; } = string.Empty;
    public string ImageOsFamily { get; init; } = string.Empty;
    public string ImageOsName { get; init; } = string.Empty;
    public bool? ImageEosl { get; init; }
    public DateTime UpdateTimestamp { get; set; }
    public long CriticalCount { get; init; }
    public long HighCount { get; init; }
    public long MediumCount { get; init; }
    public long LowCount { get; init; }
    public long UnknownCount { get; init; }

    public string FixedVersion { get; init; } = string.Empty;
    public string InstalledVersion { get; init; } = string.Empty;
    public DateTime? LastModifiedDate { get; init; }
    public Uri? PrimaryLink { get; init; }
    public DateTime? PublishedDate { get; set; }
    public string Resource { get; set; } = string.Empty;
    public float Score { get; set; }
    public int SeverityId { get; set; }
    public string Target { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string VulnerabilityId { get; set; } = string.Empty;
}

public class VulnerabilityReportSummaryDto
{
    public IEnumerable<VRSeveritiesByNsSummaryDto> SeveritiesByNsSummaryDtos { get; init; } = [];
    public IEnumerable<GenericByNsSummaryDto> ImagesByNSSummaryDtos { get; init; } = [];
    public IEnumerable<GenericSummaryDto> ImagesSummaryDtos { get; init; } = [];
    public IEnumerable<GenericByNsSummaryDto> ImageOSesByNSSummaryDtos { get; init; } = [];
    public IEnumerable<GenericSummaryDto> ImageOSSummaryDtos { get; init; } = [];
    public IEnumerable<GenericByNsSummaryDto> ImageEOSLByNsSummaryDtos { get; init; } = [];
    public IEnumerable<GenericSummaryDto> ImageEOSLSummaryDtos { get; init; } = [];
}

public class VRSeveritiesByNsSummaryDto
{
    public Guid Uid { get; init; }

    [Required]
    public string NamespaceName { get; init; } = string.Empty;

    [Required]
    public bool IsTotal { get; init; } = false;

    public IEnumerable<VRSeveritiesByNsSummaryDetailDto> Details { get; init; } = [];
}

public class VRSeveritiesByNsSummaryDetailDto
{
    public int Id { get; init; } = 0;
    public int TotalCount { get; init; } = 0;
    public int DistinctCount { get; init; } = 0;
    public int FixableTotalCount { get; init; } = 0;
    public int FixableDistinctCount { get; init; } = 0;
}

public class GenericByNsSummaryDto
{
    public string NamespaceName { get; init; } = string.Empty;
    public int TotalCount { get; init; } = 0;
    public int DistinctCount { get; init; } = 0;
    public bool IsTotal { get; init; } = false;
}

public class GenericSummaryDto
{
    public string Name { get; init; } = string.Empty;
    public int Count { get; init; } = 0;
}

public static class VulnerabilityReportCrExtensions
{
    public static VulnerabilityReportDto ToVulnerabilityReportDto(this VulnerabilityReportCr vulnerabilityReportCr)
    {
        List<VulnerabilityReportDetailDto> vulnerabilityReportDetailDtos = [];
        foreach (Vulnerability vulnerability in vulnerabilityReportCr.Report?.Vulnerabilities ?? [])
        {
            VulnerabilityReportDetailDto vulnerabilityReportDetailDto = new()
            {
                FixedVersion = vulnerability.FixedVersion,
                InstalledVersion = vulnerability.InstalledVersion,
                LastModifiedDate = vulnerability.LastModifiedDate,
                PrimaryLink = vulnerability.PrimaryLink,
                PublishedDate = vulnerability.PublishedDate,
                Resource = vulnerability.Resource,
                Score = vulnerability.Score,
                SeverityId = (int)vulnerability.Severity,
                Target = vulnerability.Target,
                Title = vulnerability.Title,
                VulnerabilityId = vulnerability.VulnerabilityId,
            };
            vulnerabilityReportDetailDtos.Add(vulnerabilityReportDetailDto);
        }

        VulnerabilityReportDto vulnerabilityReportDto = new()
        {
            Uid = Guid.TryParse(vulnerabilityReportCr.Metadata.Uid, out Guid parsedGuid)
                ? parsedGuid
                : new(),
            ResourceName =
                vulnerabilityReportCr.Metadata.Labels != null &&
                vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.name",
                    out string? resourceName)
                    ? resourceName
                    : string.Empty,
            ResourceNamespace =
                vulnerabilityReportCr.Metadata.Labels != null &&
                vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.namespace",
                    out string? resourceNamespace)
                    ? resourceNamespace
                    : string.Empty,
            ResourceKind =
                vulnerabilityReportCr.Metadata.Labels != null &&
                vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.kind",
                    out string? resourceKind)
                    ? resourceKind
                    : string.Empty,
            ResourceContainerName =
                vulnerabilityReportCr.Metadata.Labels != null &&
                vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.container.name",
                    out string? resourceContainerName)
                    ? resourceContainerName
                    : string.Empty,
            ImageName = vulnerabilityReportCr.Report?.Artifact?.Repository ?? string.Empty,
            ImageTag = vulnerabilityReportCr.Report?.Artifact?.Tag ?? string.Empty,
            ImageDigest = vulnerabilityReportCr.Report?.Artifact?.Digest ?? string.Empty,
            ImageRepository = vulnerabilityReportCr.Report?.Registry?.Server ?? string.Empty,
            ImageOsFamily = vulnerabilityReportCr.Report?.Os?.Family ?? string.Empty,
            ImageOsName = vulnerabilityReportCr.Report?.Os?.Name ?? string.Empty,
            ImageEosl = vulnerabilityReportCr.Report?.Os?.Eosl,
            CriticalCount = vulnerabilityReportCr.Report?.Summary?.CriticalCount ?? 0,
            HighCount = vulnerabilityReportCr.Report?.Summary?.HighCount ?? 0,
            MediumCount = vulnerabilityReportCr.Report?.Summary?.MediumCount ?? 0,
            LowCount = vulnerabilityReportCr.Report?.Summary?.LowCount ?? 0,
            UnknownCount = vulnerabilityReportCr.Report?.Summary?.UnknownCount ?? 0,
            UpdateTimestamp = vulnerabilityReportCr.Report?.UpdateTimestamp ?? DateTime.MinValue,
            Details = [.. vulnerabilityReportDetailDtos],
        };

        return vulnerabilityReportDto;
    }

    public static VulnerabilityReportImageDto ToVulnerabilityReportImageDto(
        this IGrouping<string?, VulnerabilityReportCr> groupedVulnerabilityReportCr,
        IEnumerable<int>? excludedSeverities = null)
    {
        excludedSeverities ??= [];
        int[] excludedSeveritiesArray = excludedSeverities.ToArray();
        List<VulnerabilityReportImageResourceDto> vrirDtos = [];
        foreach (VulnerabilityReportCr vr in groupedVulnerabilityReportCr)
        {
            VulnerabilityReportImageResourceDto vrirDto = new()
            {
                Name =
                    vr.Metadata.Labels.TryGetValue("trivy-operator.resource.name", out string? name)
                        ? name
                        : string.Empty,
                ContainerName =
                    vr.Metadata.Labels.TryGetValue("trivy-operator.container.name", out string? containerName)
                        ? containerName
                        : string.Empty,
                Kind = vr.Metadata.Labels.TryGetValue("trivy-operator.resource.kind", out string? kind)
                    ? kind
                    : string.Empty,
            };
            vrirDtos.Add(vrirDto);
        }

        VulnerabilityReportCr? latestVulnerabilityReportCr = groupedVulnerabilityReportCr
            .OrderByDescending(x => x.Report?.UpdateTimestamp)
            .FirstOrDefault();
        List<VulnerabilityReportDetailDto> vulnerabilityReportDetailDtos = [];
        foreach (Vulnerability? vulnerability in latestVulnerabilityReportCr?.Report?.Vulnerabilities ?? [])
        {
            if (!excludedSeveritiesArray.Contains((int)vulnerability.Severity))
            {
                VulnerabilityReportDetailDto vulnerabilityReportDetailDto = new()
                {
                    FixedVersion = vulnerability.FixedVersion,
                    InstalledVersion = vulnerability.InstalledVersion,
                    LastModifiedDate = vulnerability.LastModifiedDate,
                    PrimaryLink = vulnerability.PrimaryLink,
                    PublishedDate = vulnerability.PublishedDate,
                    Resource = vulnerability.Resource,
                    Score = vulnerability.Score,
                    SeverityId = (int)vulnerability.Severity,
                    Target = vulnerability.Target,
                    Title = vulnerability.Title,
                    VulnerabilityId = vulnerability.VulnerabilityId,
                };
                vulnerabilityReportDetailDtos.Add(vulnerabilityReportDetailDto);
            }
        }

        VulnerabilityReportImageDto vulnerabilityReportImageDto = new()
        {
            Uid = Guid.TryParse(latestVulnerabilityReportCr?.Metadata.Uid, out var parsedGuid)
                ? parsedGuid
                : new(),
            ResourceNamespace =
                latestVulnerabilityReportCr?.Metadata.Labels != null &&
                latestVulnerabilityReportCr.Metadata.Labels.TryGetValue(
                    "trivy-operator.resource.namespace",
                    out string? resourceNamespace)
                    ? resourceNamespace
                    : string.Empty,
            Resources = vrirDtos,
            ImageName = latestVulnerabilityReportCr?.Report?.Artifact?.Repository ?? string.Empty,
            ImageTag = latestVulnerabilityReportCr?.Report?.Artifact?.Tag ?? string.Empty,
            ImageDigest = latestVulnerabilityReportCr?.Report?.Artifact?.Digest ?? string.Empty,
            ImageRepository = latestVulnerabilityReportCr?.Report?.Registry?.Server ?? string.Empty,
            ImageOsFamily = latestVulnerabilityReportCr?.Report?.Os?.Family ?? string.Empty,
            ImageOsName = latestVulnerabilityReportCr?.Report?.Os?.Name ?? string.Empty,
            ImageEosl = latestVulnerabilityReportCr?.Report?.Os?.Eosl,
            CriticalCount = latestVulnerabilityReportCr?.Report?.Summary?.CriticalCount ?? 0,
            HighCount = latestVulnerabilityReportCr?.Report?.Summary?.HighCount ?? 0,
            MediumCount = latestVulnerabilityReportCr?.Report?.Summary?.MediumCount ?? 0,
            LowCount = latestVulnerabilityReportCr?.Report?.Summary?.LowCount ?? 0,
            UnknownCount = latestVulnerabilityReportCr?.Report?.Summary?.UnknownCount ?? 0,
            UpdateTimestamp = latestVulnerabilityReportCr?.Report?.UpdateTimestamp ?? DateTime.MinValue,
            Details = [.. vulnerabilityReportDetailDtos],
        };

        return vulnerabilityReportImageDto;
    }

    public static IList<VulnerabilityReportDenormalizedDto> ToVulnerabilityReportDenormalizedDtos(
        this VulnerabilityReportCr vulnerabilityReportCr)
    {
        List<VulnerabilityReportDenormalizedDto> vulnerabilityReportDenormalizedDtos = [];
        foreach (Vulnerability vulnerability in vulnerabilityReportCr.Report?.Vulnerabilities ?? [])
        {
            VulnerabilityReportDenormalizedDto vulnerabilityReportDenormalizedDto = new()
            {
                FixedVersion = vulnerability.FixedVersion,
                InstalledVersion = vulnerability.InstalledVersion,
                LastModifiedDate = vulnerability.LastModifiedDate,
                PrimaryLink = vulnerability.PrimaryLink,
                PublishedDate = vulnerability.PublishedDate,
                Resource = vulnerability.Resource,
                Score = vulnerability.Score,
                SeverityId = (int)vulnerability.Severity,
                Target = vulnerability.Target,
                Title = vulnerability.Title,
                VulnerabilityId = vulnerability.VulnerabilityId,
                ResourceName =
                    vulnerabilityReportCr?.Metadata?.Labels != null &&
                    vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                        "trivy-operator.resource.name",
                        out string? resourceName)
                        ? resourceName
                        : string.Empty,
                ResourceNamespace =
                    vulnerabilityReportCr?.Metadata?.Labels != null &&
                    vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                        "trivy-operator.resource.namespace",
                        out string? resourceNamespace)
                        ? resourceNamespace
                        : string.Empty,
                ResourceKind =
                    vulnerabilityReportCr?.Metadata?.Labels != null &&
                    vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                        "trivy-operator.resource.kind",
                        out string? resourceKind)
                        ? resourceKind
                        : string.Empty,
                ResourceContainerName =
                    vulnerabilityReportCr?.Metadata?.Labels != null &&
                    vulnerabilityReportCr.Metadata.Labels.TryGetValue(
                        "trivy-operator.container.name",
                        out string? resourceContainerName)
                        ? resourceContainerName
                        : string.Empty,
                ImageName = vulnerabilityReportCr?.Report?.Artifact?.Repository ?? string.Empty,
                ImageTag = vulnerabilityReportCr?.Report?.Artifact?.Tag ?? string.Empty,
                ImageDigest = vulnerabilityReportCr?.Report?.Artifact?.Digest ?? string.Empty,
                ImageRepository = vulnerabilityReportCr?.Report?.Registry?.Server ?? string.Empty,
                ImageOsFamily = vulnerabilityReportCr?.Report?.Os?.Family ?? string.Empty,
                ImageOsName = vulnerabilityReportCr?.Report?.Os?.Name ?? string.Empty,
                ImageEosl = vulnerabilityReportCr?.Report?.Os?.Eosl,
                UpdateTimestamp = vulnerabilityReportCr?.Report?.UpdateTimestamp ?? DateTime.MinValue,
                CriticalCount = vulnerabilityReportCr?.Report?.Summary?.CriticalCount ?? 0,
                HighCount = vulnerabilityReportCr?.Report?.Summary?.HighCount ?? 0,
                MediumCount = vulnerabilityReportCr?.Report?.Summary?.MediumCount ?? 0,
                LowCount = vulnerabilityReportCr?.Report?.Summary?.LowCount ?? 0,
                UnknownCount = vulnerabilityReportCr?.Report?.Summary?.UnknownCount ?? 0,
            };
            vulnerabilityReportDenormalizedDtos.Add(vulnerabilityReportDenormalizedDto);
        }

        return vulnerabilityReportDenormalizedDtos;
    }
}
