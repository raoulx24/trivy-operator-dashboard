using Microsoft.AspNetCore.Mvc;
using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;

namespace TrivyOperator.Dashboard.Application.Controllers;

[ApiController]
[Route("api/vulnerability-reports")]
public class VulnerabilityReportsController(
    IVulnerabilityReportService vulnerabilityReportService,
    ILogger<VulnerabilityReportsController> logger) : ControllerBase
{
    [HttpGet(Name = "GetVulnerabilityReportDtos")]
    [ProducesResponseType<IEnumerable<VulnerabilityReportDto>>(StatusCodes.Status200OK)]
    [Produces("application/json")]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status400BadRequest)]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status500InternalServerError)]
    public async Task<IEnumerable<VulnerabilityReportDto>> Get([FromQuery] string? namespaceName)
    {
        if (namespaceName is null)
        {
            return await vulnerabilityReportService.GetVulnerabilityReportDtos();
        }
        else
        {
            return await vulnerabilityReportService.GetVulnerabilityReportDtos(namespaceName);
        }
    }

    [HttpGet("{uid}", Name = "GetVulnerabilityReportDtoByUid")]
    [ProducesResponseType<IEnumerable<VulnerabilityReportDto>>(StatusCodes.Status200OK)]
    [Produces("application/json")]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status400BadRequest)]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status500InternalServerError)]
    public async Task<IActionResult> GetByUid(Guid uid)
    {
        VulnerabilityReportDto? vulnerabilityReportDto = await vulnerabilityReportService.GetVulnerabilityReportDtoByUid(uid);

        if (vulnerabilityReportDto is null)
        {
            return NotFound();
        }
        
        return Ok(vulnerabilityReportDto);
    }

    [HttpGet("denormalized", Name = "GetVulnerabilityReportDenormalizedDto")]
    [ProducesResponseType<IEnumerable<VulnerabilityReportDenormalizedDto>>(StatusCodes.Status200OK)]
    [Produces("application/json")]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status400BadRequest)]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status500InternalServerError)]
    public async Task<IEnumerable<VulnerabilityReportDenormalizedDto>> GetDenormalized()
    {
        return await vulnerabilityReportService.GetVulnerabilityReportDenormalizedDtos();
    }

    [HttpGet("active-namespaces", Name = "GetVulnerabilityReportActiveNamespaces")]
    [ProducesResponseType<IEnumerable<string>>(StatusCodes.Status200OK)]
    [Produces("application/json")]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status400BadRequest)]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status500InternalServerError)]
    public async Task<IEnumerable<string>> GetActiveNamespaces()
    {
        return await vulnerabilityReportService.GetActiveNamespaces();
    }

    [HttpGet("summary-by-namespace", Name = "GetVulnerabilityReportSummaryDtos")]
    [ProducesResponseType<IEnumerable<VulnerabilityReportSummaryDto>>(StatusCodes.Status200OK)]
    [Produces("application/json")]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status400BadRequest)]
    [ProducesResponseType<ProblemDetails>(StatusCodes.Status500InternalServerError)]
    public async Task<IEnumerable<VulnerabilityReportSummaryDto>> GetVulnerabilityReportSummaryDtos()
    {
        return await vulnerabilityReportService.GetVulnerabilityReportSummaryDtos();
    }
}
