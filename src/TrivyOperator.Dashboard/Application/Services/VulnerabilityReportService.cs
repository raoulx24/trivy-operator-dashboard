using k8s.Models;
using System.Collections.Generic;
using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;
using YamlDotNet.Core.Tokens;

namespace TrivyOperator.Dashboard.Application.Services;

public class VulnerabilityReportService(IConcurrentCache<string, IList<VulnerabilityReportCr>> cache)
    : IVulnerabilityReportService
{
    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos()
    {
        List<VulnerabilityReportDto> vulnerabilityReportDtos = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                vulnerabilityReportDtos.AddRange(GetVulnerabilityReportDtos(vulnerabilityReportCrs));
            }
        }

        return Task.FromResult((IList<VulnerabilityReportDto>)vulnerabilityReportDtos);
    }

    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos(string namespaceName)
    {
        return cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs)
            ? Task.FromResult(GetVulnerabilityReportDtos(vulnerabilityReportCrs))
            : Task.FromResult<IList<VulnerabilityReportDto>>([]);
    }

    public Task<VulnerabilityReportDto?> GetVulnerabilityReportDtoByUid(Guid uid)
    {
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                VulnerabilityReportCr? vulnerabilityReportCr = vulnerabilityReportCrs.Where(x => x.Metadata.Uid == uid.ToString()).FirstOrDefault();

                if (vulnerabilityReportCr is not null)
                {
                    return Task.FromResult<VulnerabilityReportDto?>(vulnerabilityReportCr.ToVulnerabilityReportDto());
                }
            }
        }

        return Task.FromResult<VulnerabilityReportDto?>(null);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos()
    {
        List<VulnerabilityReportDenormalizedDto> vulnerabilityReportDtos = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                vulnerabilityReportDtos.AddRange(GetVulnerabilityReportDenormalizedDtos(vulnerabilityReportCrs));
            }
        }

        return Task.FromResult((IList<VulnerabilityReportDenormalizedDto>)vulnerabilityReportDtos);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos(string namespaceName)
    {
        return cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs)
            ? Task.FromResult(GetVulnerabilityReportDenormalizedDtos(vulnerabilityReportCrs))
            : Task.FromResult<IList<VulnerabilityReportDenormalizedDto>>([]);
    }

    public Task<IEnumerable<string>> GetActiveNamespaces()
    {
        return Task.FromResult(cache.Where(x => x.Value.Any()).Select(x => x.Key));
    }

    public Task<IEnumerable<VulnerabilityReportSummaryDto>> GetVulnerabilityReportSummaryDtos()
    {
        List<VulnerabilityReportSummaryDto> vulnerabilityReportSummaryDtos = [];
        foreach (var (key, value) in cache)
        {
            if (value.Any())
            {
                List<VulnerabilityReportSummaryDetailDto> detailDtos = [];
                detailDtos.Add(new() { Id = 0, TotalCount = value.Sum(x => x.Report.Summary.CriticalCount), });
                detailDtos.Add(new() { Id = 1, TotalCount = value.Sum(x => x.Report.Summary.HighCount), });
                detailDtos.Add(new() { Id = 2, TotalCount = value.Sum(x => x.Report.Summary.MediumCount), });
                detailDtos.Add(new() { Id = 3, TotalCount = value.Sum(x => x.Report.Summary.LowCount), });
                detailDtos.Add(new() { Id = 4, TotalCount = value.Sum(x => x.Report.Summary.UnknownCount), });
                VulnerabilityReportSummaryDto vulnerabilityReportSummaryDto = new()
                {
                    Uid = Guid.NewGuid(),
                    NamespaceName = key,
                    Details = detailDtos,
                };

                vulnerabilityReportSummaryDtos.Add(vulnerabilityReportSummaryDto);
            }
        }

        return Task.FromResult((IEnumerable<VulnerabilityReportSummaryDto>)vulnerabilityReportSummaryDtos.OrderBy(x => x.NamespaceName).ToList());
    }

    public Task<IEnumerable<VulnerabilityReportImageDto>> GetVulnerabilityReportImageDtos(
        string? namespaceName = null, IEnumerable<int>? excludedSeverities = null)
    {
        excludedSeverities ??= [];
        List<VulnerabilityReportImageDto> vulnerabilityReportImageDtos = [];
        
        if (string.IsNullOrWhiteSpace(namespaceName))
        {
            foreach ((string key, IList<VulnerabilityReportCr> value) in cache)
            {
                vulnerabilityReportImageDtos.AddRange(GetVulnerabilityReportImageDtos(value, excludedSeverities));
            }
        }
        else
        {
            if (cache.ContainsKey(namespaceName))
            {
                vulnerabilityReportImageDtos.AddRange(GetVulnerabilityReportImageDtos(cache[namespaceName], excludedSeverities));
            }
        }
        
        return Task.FromResult((IEnumerable<VulnerabilityReportImageDto>)vulnerabilityReportImageDtos);
    }

    private static IList<VulnerabilityReportDto> GetVulnerabilityReportDtos(IList<VulnerabilityReportCr> vulnerabilityReportCrs)
    {
        List<VulnerabilityReportDto> dtos = [];
        foreach (VulnerabilityReportCr vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.Add(vulnerabilityReportCr.ToVulnerabilityReportDto());
        }

        return dtos;
    }

    private static IList<VulnerabilityReportDenormalizedDto> GetVulnerabilityReportDenormalizedDtos(IList<VulnerabilityReportCr> vulnerabilityReportCrs)
    {
        List<VulnerabilityReportDenormalizedDto> dtos = [];
        foreach (VulnerabilityReportCr vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.AddRange(vulnerabilityReportCr.ToVulnerabilityReportDenormalizedDtos());
        }

        return dtos;
    }

    private static IList<VulnerabilityReportImageDto> GetVulnerabilityReportImageDtos(
        IList<VulnerabilityReportCr> vulnerabilityReportCrs, IEnumerable<int> excludedSeverities)
    {
        List<VulnerabilityReportImageDto> vulnerabilityReportImageDtos = [];
        IEnumerable<IGrouping<string?, VulnerabilityReportCr>> groupedVulnerabilityReports = vulnerabilityReportCrs.GroupBy(x => x.Report?.Artifact?.Digest);
        foreach (IGrouping<string?, VulnerabilityReportCr> kvp in groupedVulnerabilityReports)
        {
            vulnerabilityReportImageDtos.Add(kvp.ToVulnerabilityReportImageDto(excludedSeverities));
        }
        if (excludedSeverities != null && excludedSeverities.Any())
        {
            for (int i = vulnerabilityReportImageDtos.Count - 1; i >= 0; i--)
            {
                if (vulnerabilityReportImageDtos[i].Vulnerabilities != null && vulnerabilityReportImageDtos[i].Vulnerabilities.Length == 0)
                    vulnerabilityReportImageDtos.RemoveAt(i);
            }
        }

        return vulnerabilityReportImageDtos;
    }
}
