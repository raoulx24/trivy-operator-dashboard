using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;

namespace TrivyOperator.Dashboard.Application.Services;

public class VulnerabilityReportService(IConcurrentCache<string, IList<VulnerabilityReportCR>> cache)
    : IVulnerabilityReportService
{
    public Task<List<VulnerabilityDto>> GetTrivyVulnerabilities()
    {
        List<VulnerabilityReportCR> allVulnerabilities = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCR>? vulnerabilities))
            {
                allVulnerabilities.AddRange(vulnerabilities);
            }
        }

        return Task.FromResult(GetDtos(allVulnerabilities));
    }

    public Task<List<VulnerabilityDto>> GetTrivyVulnerabilities(string namespaceName) =>
        cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCR>? vulnerabilities)
            ? Task.FromResult(GetDtos(vulnerabilities))
            : Task.FromResult<List<VulnerabilityDto>>([]);

    private static List<VulnerabilityDto> GetDtos(IList<VulnerabilityReportCR> vulnerabilityReportCrs)
    {
        List<VulnerabilityDto> dtos = [];
        foreach (VulnerabilityReportCR vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.AddRange(vulnerabilityReportCr.ToVulnerabilityDtos());
        }

        return dtos;
    }
}
