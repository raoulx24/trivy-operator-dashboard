using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy;

namespace TrivyOperator.Dashboard.Application.Services;

public class VulnerabilityReportService(IConcurrentCache<string, IList<VulnerabilityReportCr>> cache, ILogger<IVulnerabilityReportService> logger)
    : IVulnerabilityReportService
{
    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos()
    {
        List<VulnerabilityReportDto> vulnerabilityReportDtos = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                vulnerabilityReportDtos.AddRange(GetVulnerabilityReportDtos(vulnerabilityReportCrs));
            }
        }

        return Task.FromResult((IList<VulnerabilityReportDto>)vulnerabilityReportDtos);
    }

    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos(string namespaceName)
    {
        return cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs)
            ? Task.FromResult(GetVulnerabilityReportDtos(vulnerabilityReportCrs))
            : Task.FromResult<IList<VulnerabilityReportDto>>([]);
    }

    public Task<VulnerabilityReportDto?> GetVulnerabilityReportDtoByUid(Guid uid)
    {
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                VulnerabilityReportCr? vulnerabilityReportCr = vulnerabilityReportCrs.Where(x => x.Metadata.Uid == uid.ToString()).FirstOrDefault();

                if (vulnerabilityReportCr is not null)
                {
                    return Task.FromResult<VulnerabilityReportDto?>(vulnerabilityReportCr.ToVulnerabilityReportDto());
                }
            }
        }

        return Task.FromResult<VulnerabilityReportDto?>(null);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos()
    {
        List<VulnerabilityReportDenormalizedDto> vulnerabilityReportDtos = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                vulnerabilityReportDtos.AddRange(GetVulnerabilityReportDenormalizedDtos(vulnerabilityReportCrs));
            }
        }

        return Task.FromResult((IList<VulnerabilityReportDenormalizedDto>)vulnerabilityReportDtos);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos(string namespaceName)
    {
        return cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs)
            ? Task.FromResult(GetVulnerabilityReportDenormalizedDtos(vulnerabilityReportCrs))
            : Task.FromResult<IList<VulnerabilityReportDenormalizedDto>>([]);
    }

    public Task<IEnumerable<string>> GetActiveNamespaces()
    {
        return Task.FromResult(cache.Where(x => x.Value.Any()).Select(x => x.Key));
    }

    public Task<IEnumerable<VulnerabilityReportImageDto>> GetVulnerabilityReportImageDtos(
        string? namespaceName = null, IEnumerable<int>? excludedSeverities = null)
    {
        excludedSeverities ??= [];
        List<VulnerabilityReportImageDto> vulnerabilityReportImageDtos = [];
        
        if (string.IsNullOrWhiteSpace(namespaceName))
        {
            foreach ((string key, IList<VulnerabilityReportCr> value) in cache)
            {
                vulnerabilityReportImageDtos.AddRange(GetVulnerabilityReportImageDtos(value, excludedSeverities));
            }
        }
        else
        {
            if (cache.ContainsKey(namespaceName))
            {
                vulnerabilityReportImageDtos.AddRange(GetVulnerabilityReportImageDtos(cache[namespaceName], excludedSeverities));
            }
        }
        
        return Task.FromResult((IEnumerable<VulnerabilityReportImageDto>)vulnerabilityReportImageDtos);
    }

    private static IList<VulnerabilityReportDto> GetVulnerabilityReportDtos(IList<VulnerabilityReportCr> vulnerabilityReportCrs)
    {
        List<VulnerabilityReportDto> dtos = [];
        foreach (VulnerabilityReportCr vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.Add(vulnerabilityReportCr.ToVulnerabilityReportDto());
        }

        return dtos;
    }

    private static IList<VulnerabilityReportDenormalizedDto> GetVulnerabilityReportDenormalizedDtos(IList<VulnerabilityReportCr> vulnerabilityReportCrs)
    {
        List<VulnerabilityReportDenormalizedDto> dtos = [];
        foreach (VulnerabilityReportCr vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.AddRange(vulnerabilityReportCr.ToVulnerabilityReportDenormalizedDtos());
        }

        return dtos;
    }

    private static IList<VulnerabilityReportImageDto> GetVulnerabilityReportImageDtos(
        IList<VulnerabilityReportCr> vulnerabilityReportCrs, IEnumerable<int> excludedSeverities)
    {
        List<VulnerabilityReportImageDto> vulnerabilityReportImageDtos = [];
        IEnumerable<IGrouping<string?, VulnerabilityReportCr>> groupedVulnerabilityReports = vulnerabilityReportCrs.GroupBy(x => x.Report?.Artifact?.Digest);
        foreach (IGrouping<string?, VulnerabilityReportCr> kvp in groupedVulnerabilityReports)
        {
            vulnerabilityReportImageDtos.Add(kvp.ToVulnerabilityReportImageDto(excludedSeverities));
        }
        if (excludedSeverities != null && excludedSeverities.Any())
        {
            for (int i = vulnerabilityReportImageDtos.Count - 1; i >= 0; i--)
            {
                if (vulnerabilityReportImageDtos[i].Vulnerabilities != null && vulnerabilityReportImageDtos[i].Vulnerabilities.Length == 0)
                    vulnerabilityReportImageDtos.RemoveAt(i);
            }
        }

        return vulnerabilityReportImageDtos;
    }

    public async Task<VulnerabilityReportSumaryDto> GetVulnerabilityReportSummaryDtos()
    {
        return new()
        {
            SeveritiesByNsSummaryDtos = await GetSeveritiesByNsSummaryDtos(),
            ImagesByNSSummaryDtos = await GetImagesByNSSummaryDtos(),
            ImagesSummaryDtos = await GetImageSummaryDtos(),
            ImageOSesByNSSummaryDtos = await GetImageOSByNSSummaryDtos(),
            ImageOSSummaryDtos = await GetImageOSSummaryDtos(),
            ImageEOSLByNsSummaryDtos = await GetImageEOSLByNsSummaryDtos(),
            ImageEOSLSummaryDtos = await GetImageEOSLSummaryDtos(),
        };
    }

    private Task<IEnumerable<VRSeveritiesByNsSummaryDto>> GetSeveritiesByNsSummaryDtos()
    {
        List<VRSeveritiesByNsSummaryDto> vulnerabilityReportSummaryDtos = [];
        List<VRSeveritiesByNsSummaryDetailDto> detailDtos = [];
        VRSeveritiesByNsSummaryDto vulnerabilityReportSummaryDto;
        List<int> severityIds = Enum.GetValues(typeof(TrivySeverity)).Cast<TrivySeverity>().Select(x => (int)x).ToList();
        var groupedStatistics = cache
            .Where(kvp => kvp.Value.Any())
            .SelectMany(kvp => kvp.Value
                .SelectMany(vr => (vr.Report?.Vulnerabilities ?? [])
                    .Select(vrd => new { vr.Metadata.NamespaceProperty, vrd.Severity, vrd.VulnerabilityId, isFixable = !string.IsNullOrWhiteSpace(vrd.FixedVersion) })))
            .GroupBy(item => new { item.NamespaceProperty, item.Severity })
            .Select(group => new
            {
                namespaceName = group.Key.NamespaceProperty,
                trivySeverityId = group.Key.Severity,
                totalCount = group.Count(),
                distinctCount = group.Select(item => item.VulnerabilityId).Distinct().Count(),
                fixableTotalCount = group.Where(item => item.isFixable).Count(),
                fixableDistinctCount = group.Where(item => item.isFixable).Select(item => item.VulnerabilityId).Distinct().Count(),
            })
            .GroupBy(x => x.namespaceName)
            .SelectMany(g => severityIds.Select(SeverityId => new
            {
                NamespaceName = g.Key,
                SeverityId,
                TotalCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.totalCount ?? 0,
                DistinctCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.distinctCount ?? 0,
                FixableTotalCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.fixableTotalCount ?? 0,
                FixableDistinctCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.fixableDistinctCount ?? 0,
            }))
            .GroupBy(last => last.NamespaceName);
        foreach (var groupPair in groupedStatistics)
        {
            detailDtos = [];
            foreach (var namespaceStatistics in groupPair)
            {
                detailDtos.Add(new()
                {
                    Id = namespaceStatistics.SeverityId,
                    TotalCount = namespaceStatistics.TotalCount,
                    DistinctCount = namespaceStatistics.DistinctCount,
                    FixableTotalCount = namespaceStatistics.FixableTotalCount,
                    FixableDistinctCount = namespaceStatistics.FixableDistinctCount,
                });
            }
            vulnerabilityReportSummaryDto = new()
            {
                Uid = Guid.NewGuid(),
                NamespaceName = groupPair.Key,
                Details = detailDtos,
                IsTotal = false,
            };
            vulnerabilityReportSummaryDtos.Add(vulnerabilityReportSummaryDto);
        }
        var globalStatistics = cache
            .Where(kvp => kvp.Value.Any())
            .SelectMany(kvp => kvp.Value
                .SelectMany(vr => (vr.Report?.Vulnerabilities ?? [])
                    .Select(vrd => new { vrd.Severity, vrd.VulnerabilityId, isFixable = !string.IsNullOrWhiteSpace(vrd.FixedVersion) })))
            .GroupBy(item => item.Severity)
            .Select(group => new
            {
                trivySeverityId = (int)group.Key,
                totalCount = group.Count(),
                distinctCount = group.Select(item => item.VulnerabilityId).Distinct().Count(),
                fixableTotalCount = group.Where(item => item.isFixable).Count(),
                fixableDistinctCount = group.Where(item => item.isFixable).Select(item => item.VulnerabilityId).Distinct().Count(),
            })
            .GroupJoin(
            severityIds, left => left.trivySeverityId, right => right,
            (left, groupedJoin) => new { left.trivySeverityId, left.totalCount, left.distinctCount, left.fixableTotalCount, left.fixableDistinctCount, found = groupedJoin.Any() }
            )
            .Select(result => new
            {
                SeverityId = result.trivySeverityId,
                TotalCount = result.found ? result.totalCount : 0,
                DistinctCount = result.found ? result.distinctCount : 0,
                FixableTotalCount = result.found ? result.fixableTotalCount : 0,
                FixableDistinctCount = result.found ? result.fixableDistinctCount : 0,
            });
        detailDtos = [];
        foreach (var severityStatistics in globalStatistics)
        {
            detailDtos.Add(new()
            {
                Id = severityStatistics.SeverityId,
                TotalCount = severityStatistics.TotalCount,
                DistinctCount = severityStatistics.DistinctCount,
                FixableTotalCount = severityStatistics.FixableTotalCount,
                FixableDistinctCount = severityStatistics.FixableDistinctCount,
            });
        }
        vulnerabilityReportSummaryDto = new()
        {
            Uid = Guid.NewGuid(),
            NamespaceName = string.Empty,
            Details = detailDtos,
            IsTotal = true,
        };
        vulnerabilityReportSummaryDtos.Add(vulnerabilityReportSummaryDto);

        return Task.FromResult((IEnumerable<VRSeveritiesByNsSummaryDto>)vulnerabilityReportSummaryDtos.OrderBy(x => x.NamespaceName).ToList());
    }

    
    private Task<IEnumerable<GenericByNsSummaryDto>> GetImagesByNSSummaryDtos()
    {
        List<GenericByNsSummaryDto> imagesByNSSummaryDtos = [];
        var groupedStatistics = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Select(vr => new { NamespaceProperty = kvp.Key, Digest = (vr.Report?.Artifact?.Digest ?? string.Empty) }))
                .GroupBy(item => item.NamespaceProperty)
                .Select(group => new
                {
                    NamespaceName = group.Key,
                    TotalCount = group.Count(),
                    DistinctCount = group.Distinct().Count(),
                });

        foreach (var item in groupedStatistics)
        {
            GenericByNsSummaryDto dto = new()
            {
                NamespaceName = item.NamespaceName,
                TotalCount = item.TotalCount,
                DistinctCount = item.DistinctCount,
                IsTotal = false,
            };
            imagesByNSSummaryDtos.Add(dto);
        }

        var globalStatistics = cache
            .Where(kvp => kvp.Value.Any())
            .SelectMany(kvp => kvp.Value
                .Select(vr => (vr.Report?.Artifact?.Digest ?? string.Empty)));

        GenericByNsSummaryDto totalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Distinct().Count(),
            IsTotal = true,
        };
        imagesByNSSummaryDtos.Add(totalDto);

        return Task.FromResult((IEnumerable<GenericByNsSummaryDto>)imagesByNSSummaryDtos.OrderBy(x => x.NamespaceName).ToList());
    }

    private Task<IEnumerable<GenericSummaryDto>> GetImageSummaryDtos()
    {
        List<GenericSummaryDto> imageSummaryDtos = [];
        var groupedStatistics = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Select(vr => vr))
                .GroupBy(item => (item.Report?.Artifact?.Digest ?? string.Empty))
                .Select(group => new
                {
                    ImageRegistry = group.FirstOrDefault()?.Report?.Registry?.Server ?? string.Empty,
                    ImageName = group.FirstOrDefault()?.Report?.Artifact?.Repository ?? string.Empty,
                    ImageTag = group.FirstOrDefault()?.Report?.Artifact?.Tag ?? string.Empty,
                    Count = group.Count(),
                });
        foreach (var item in groupedStatistics) {
            GenericSummaryDto dto = new()
            {
                Name = $"{item.ImageRegistry}/{item.ImageName}:{item.ImageTag}",
                Count = item.Count,
            };
            imageSummaryDtos.Add(dto);
        }

        return Task.FromResult((IEnumerable<GenericSummaryDto>)imageSummaryDtos.ToList());
    }

    private Task<IEnumerable<GenericByNsSummaryDto>> GetImageOSByNSSummaryDtos()
    {
        List<GenericByNsSummaryDto> vRImageOSesByNSSummaryDtos = [];
        var groupedStatistics = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Select(vr => new { NamespaceProperty = kvp.Key, OsName = (vr.Report?.Os?.Name ?? string.Empty), Os = (vr.Report?.Os?.Family ?? string.Empty) }))
                .GroupBy(item => item.NamespaceProperty)
                .Select(group => new
                {
                    NamespaceName = group.Key,
                    TotalCount = group.Count(),
                    DistinctCount = group.Select(item => item.OsName + item.Os).Distinct().Count(),
                });
        foreach (var item in groupedStatistics)
        {
            GenericByNsSummaryDto dto = new()
            {
                NamespaceName = item.NamespaceName,
                TotalCount = item.TotalCount,
                DistinctCount = item.DistinctCount,
                IsTotal = false,
            };
            vRImageOSesByNSSummaryDtos.Add(dto);
        }
        var globalStatistics = cache
            .Where(kvp => kvp.Value.Any())
            .SelectMany(kvp => kvp.Value
                .Select(vr => new { OsName = (vr.Report?.Os?.Name ?? string.Empty), Os = (vr.Report?.Os?.Family ?? string.Empty) }));
        GenericByNsSummaryDto globalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Select(item => item.OsName + item.Os).Distinct().Count(),
            IsTotal = true,
        };
        vRImageOSesByNSSummaryDtos.Add(globalDto);

        return Task.FromResult((IEnumerable<GenericByNsSummaryDto>)vRImageOSesByNSSummaryDtos.OrderBy(x => x.NamespaceName).ToList());
    }

    private Task<IEnumerable<GenericSummaryDto>> GetImageOSSummaryDtos()
    {
        List<GenericSummaryDto> imageOSSummaryDtos = [];
        var imageOSes = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Select(vr => $"{(vr.Report?.Os?.Family ?? string.Empty)} - {(vr.Report?.Os?.Name ?? string.Empty)}"))
                .GroupBy(image => image)
                .Select(group => new
                {
                    OSFullName = group.Key,
                    TotalCount = group.Count(),
                });
        foreach (var item in imageOSes)
        {
            GenericSummaryDto dto = new()
            {
                Name = item.OSFullName,
                Count = item.TotalCount,
            };
            imageOSSummaryDtos.Add(dto);
        }

        return Task.FromResult((IEnumerable<GenericSummaryDto>)imageOSSummaryDtos.ToList());
    }

    private Task<IEnumerable<GenericByNsSummaryDto>> GetImageEOSLByNsSummaryDtos()
    {
        List<GenericByNsSummaryDto> imageEOSLByNsSummaryDtos = [];
        var groupedStatistics = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Where(vr => vr.Report?.Os?.Eosl ?? false)
                    .Select(vr => new { NamespaceName = kvp.Key, OsFullName = (vr.Report?.Os?.Name ?? string.Empty) + (vr.Report?.Os?.Family ?? string.Empty) }))
                .GroupBy(item => item.NamespaceName)
                .Select(group => new
                {
                    NamespaceName = group.Key,
                    TotalCount = group.Count(),
                    DistinctCount = group.Select(item => item).Distinct().Count(),
                });
        foreach (var item in groupedStatistics)
        {
            GenericByNsSummaryDto dto = new()
            {
                NamespaceName = item.NamespaceName,
                TotalCount = item.TotalCount,
                DistinctCount = item.DistinctCount,
                IsTotal = false,
            };
            imageEOSLByNsSummaryDtos.Add(dto);
        }
        var globalStatistics = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Where(vr => vr.Report?.Os?.Eosl ?? false)
                    .Select(vr => new { NamespaceName = kvp.Key, OsFullName = (vr.Report?.Os?.Name ?? string.Empty) + (vr.Report?.Os?.Family ?? string.Empty) }));
        GenericByNsSummaryDto globalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Select(x => x.OsFullName).Distinct().Count(),
            IsTotal = true,
        };
        imageEOSLByNsSummaryDtos.Add(globalDto);

        return Task.FromResult((IEnumerable<GenericByNsSummaryDto>)imageEOSLByNsSummaryDtos.OrderBy(x => x.NamespaceName).ToList());
    }

    private Task<IEnumerable<GenericSummaryDto>> GetImageEOSLSummaryDtos()
    {
        List<GenericSummaryDto> imageEOSLSummaryDtos = [];
        var groupedStatistics = cache
                .Where(kvp => kvp.Value.Any())
                .SelectMany(kvp => kvp.Value
                    .Where(vr => vr.Report?.Os?.Eosl ?? false)
                    .Select(vr => $"{(vr.Report?.Os?.Family ?? string.Empty)} - {(vr.Report?.Os?.Name ?? string.Empty)}"))
                .GroupBy(item => item)
                .Select(group => new
                {
                    OSFullName = group.Key,
                    Count = group.Count(),
                });
        foreach (var item in groupedStatistics)
        {
            GenericSummaryDto dto = new()
            {
                Name = item.OSFullName,
                Count = item.Count,
            };
            imageEOSLSummaryDtos.Add(dto);
        }

        return Task.FromResult((IEnumerable<GenericSummaryDto>)imageEOSLSummaryDtos.ToList());
    }
}
