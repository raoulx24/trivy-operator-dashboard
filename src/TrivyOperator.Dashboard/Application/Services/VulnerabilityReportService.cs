using k8s.Models;
using System.Collections.Generic;
using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;

namespace TrivyOperator.Dashboard.Application.Services;

public class VulnerabilityReportService(IConcurrentCache<string, IList<VulnerabilityReportCr>> cache)
    : IVulnerabilityReportService
{
    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos()
    {
        List<VulnerabilityReportDto> vulnerabilityReportDtos = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                vulnerabilityReportDtos.AddRange(GetVulnerabilityReportDtos(vulnerabilityReportCrs));
            }
        }

        return Task.FromResult((IList<VulnerabilityReportDto>)vulnerabilityReportDtos);
    }

    public Task<IList<VulnerabilityReportDto>> GetVulnerabilityReportDtos(string namespaceName)
    {
        return cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs)
            ? Task.FromResult(GetVulnerabilityReportDtos(vulnerabilityReportCrs))
            : Task.FromResult<IList<VulnerabilityReportDto>>([]);
    }

    public Task<VulnerabilityReportDto?> GetVulnerabilityReportDtoByUid(Guid uid)
    {
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                VulnerabilityReportCr? vulnerabilityReportCr = vulnerabilityReportCrs.Where(x => x.Metadata.Uid == uid.ToString()).FirstOrDefault();

                if (vulnerabilityReportCr is not null)
                {
                    return Task.FromResult<VulnerabilityReportDto?>(vulnerabilityReportCr.ToVulnerabilityReportDto());
                }
            }
        }

        return Task.FromResult<VulnerabilityReportDto?>(null);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos()
    {
        List<VulnerabilityReportDenormalizedDto> vulnerabilityReportDtos = [];
        foreach (string namespaceName in cache.Keys)
        {
            if (cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                vulnerabilityReportDtos.AddRange(GetVulnerabilityReportDenormalizedDtos(vulnerabilityReportCrs));
            }
        }

        return Task.FromResult((IList<VulnerabilityReportDenormalizedDto>)vulnerabilityReportDtos);
    }

    public Task<IList<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos(string namespaceName)
    {
        return cache.TryGetValue(namespaceName, out IList<VulnerabilityReportCr>? vulnerabilityReportCrs)
            ? Task.FromResult(GetVulnerabilityReportDenormalizedDtos(vulnerabilityReportCrs))
            : Task.FromResult<IList<VulnerabilityReportDenormalizedDto>>([]);
    }

    public Task<IEnumerable<string>> GetActiveNamespaces()
    {
        return Task.FromResult(cache.Where(x => x.Value.Any()).Select(x => x.Key));
    }

    private static IList<VulnerabilityReportDto> GetVulnerabilityReportDtos(IList<VulnerabilityReportCr> vulnerabilityReportCrs)
    {
        List<VulnerabilityReportDto> dtos = [];
        foreach (VulnerabilityReportCr vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.Add(vulnerabilityReportCr.ToVulnerabilityReportDto());
        }

        return dtos;
    }

    private static IList<VulnerabilityReportDenormalizedDto> GetVulnerabilityReportDenormalizedDtos(IList<VulnerabilityReportCr> vulnerabilityReportCrs)
    {
        List<VulnerabilityReportDenormalizedDto> dtos = [];
        foreach (VulnerabilityReportCr vulnerabilityReportCr in vulnerabilityReportCrs)
        {
            dtos.AddRange(vulnerabilityReportCr.ToVulnerabilityReportDenormalizedDtos());
        }

        return dtos;
    }
}
