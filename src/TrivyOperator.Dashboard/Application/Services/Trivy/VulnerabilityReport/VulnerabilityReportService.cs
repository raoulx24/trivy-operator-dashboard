using k8s.Models;
using System.Collections.Concurrent;
using TrivyOperator.Dashboard.Application.Models;
using TrivyOperator.Dashboard.Application.Services.Trivy.VulnerabilityReport.Abstractions;
using TrivyOperator.Dashboard.Domain.Trivy;
using TrivyOperator.Dashboard.Domain.Trivy.VulnerabilityReport;
using TrivyOperator.Dashboard.Infrastructure.Abstractions;

namespace TrivyOperator.Dashboard.Application.Services.Trivy.VulnerabilityReport;

public class VulnerabilityReportService(IConcurrentDictionaryCache<VulnerabilityReportCr> cache)
    : IVulnerabilityReportService
{
    public Task<IEnumerable<VulnerabilityReportDto>> GetVulnerabilityReportDtos(string? namespaceName = null)
    {
        IEnumerable<VulnerabilityReportCr> cachedValues = [.. cache
            .Where(kvp => string.IsNullOrEmpty(namespaceName) || kvp.Key == namespaceName)
            .SelectMany(kvp => kvp.Value.Values)];
        IEnumerable<VulnerabilityReportDto> result = cachedValues.Select(vr => vr.ToVulnerabilityReportDto());

        return Task.FromResult(result);
    }

    public Task<VulnerabilityReportDto?> GetVulnerabilityReportDtoByUid(Guid uid)
    {
        string[] namespaceNames = [.. cache.Where(x => !x.Value.IsEmpty).Select(x => x.Key)];

        foreach (string namespaceName in namespaceNames)
        {
            if (cache.TryGetValue(namespaceName, out ConcurrentDictionary<string, VulnerabilityReportCr>? vulnerabilityReportCrs))
            {
                VulnerabilityReportCr? vulnerabilityReportCr =
                    vulnerabilityReportCrs.Select(kvp => kvp.Value).FirstOrDefault(vr => vr.Metadata.Uid == uid.ToString());

                if (vulnerabilityReportCr is not null)
                {
                    return Task.FromResult<VulnerabilityReportDto?>(vulnerabilityReportCr.ToVulnerabilityReportDto());
                }
            }
        }

        return Task.FromResult<VulnerabilityReportDto?>(null);
    }

    public Task<IEnumerable<VulnerabilityReportDenormalizedDto>> GetVulnerabilityReportDenormalizedDtos(
        string? namespaceName = null)
    {
        IEnumerable<VulnerabilityReportCr> cachedValues = [.. cache
            .Where(kvp => string.IsNullOrEmpty(namespaceName) || kvp.Key == namespaceName)
            .SelectMany(kvp => kvp.Value.Values)];
        IEnumerable<VulnerabilityReportDenormalizedDto> result = cachedValues
            .SelectMany(vr => vr.ToVulnerabilityReportDenormalizedDtos());

        return Task.FromResult(result);
    }

    public Task<IEnumerable<string>> GetActiveNamespaces() =>
        Task.FromResult<IEnumerable<string>>([.. cache.Where(x => !x.Value.IsEmpty).Select(x => x.Key)]);

    public Task<IEnumerable<VulnerabilityReportImageDto>> GetVulnerabilityReportImageDtos(
        string? namespaceName = null,
        IEnumerable<int>? excludedSeverities = null)
    {
        excludedSeverities ??= [];
        int[] excludedSeveritiesArray = excludedSeverities.ToArray();
        int[] incudedSeverities = [.. Enum.GetValues<TrivySeverity>().Cast<int>().Except(excludedSeveritiesArray)];

        IEnumerable<VulnerabilityReportCr> cachedValues = [.. cache
            .Where(kvp => string.IsNullOrEmpty(namespaceName) || kvp.Key == namespaceName)
            .SelectMany(kvp => kvp.Value.Values)];
        IEnumerable<VulnerabilityReportImageDto> vulnerabilityReportImageDtos = cachedValues
            .GroupBy(vr => vr.Report?.Artifact?.Digest)
            .Select(group => group.ToVulnerabilityReportImageDto())
            .Select(
                vrDto =>
                {
                    vrDto.Details = [.. vrDto.Details.Join(
                            incudedSeverities,
                            vulnerability => vulnerability.SeverityId,
                            id => id,
                            (vulnerability, _) => vulnerability)];
                    return vrDto;
                })
            .Where(vrDto => excludedSeveritiesArray.Length == 0 || vrDto.Details.Length != 0);

        return Task.FromResult(vulnerabilityReportImageDtos);
    }

    public Task<VulnerabilityReportImageDto?> GetVulnerabilityReportImageDtoByDigestNamespace(string digest, string namespaceName)
    {
        IEnumerable<VulnerabilityReportCr> cachedValues = [.. cache
            .Where(kvp => kvp.Key == namespaceName)
            .SelectMany(kvp => kvp.Value.Values)];
        VulnerabilityReportImageDto? vulnerabilityReportImageDto = cachedValues
                .Where(x => x.Report?.Artifact?.Digest == digest)
                .GroupBy(x => x.Report?.Artifact?.Digest)
                .Select(group => group.ToVulnerabilityReportImageDto())
                .FirstOrDefault();
        return Task.FromResult(vulnerabilityReportImageDto);
    }

    public async Task<VulnerabilityReportSummaryDto> GetVulnerabilityReportSummaryDtos()
    {
        IEnumerable<VulnerabilityReportCr> cachedValues = [.. cache.SelectMany(kvp => kvp.Value.Values)];
        VulnerabilityReportSummaryDto vulnerabilityReportSummaryDto = new()
        {

            SeveritiesByNsSummaryDtos = await GetSeveritiesByNsSummaryDtos(cachedValues),
            ImagesByNSSummaryDtos = await GetImagesByNSSummaryDtos(cachedValues),
            ImagesSummaryDtos = await GetImageSummaryDtos(cachedValues),
            ImageOSesByNSSummaryDtos = await GetImageOSByNSSummaryDtos(cachedValues),
            ImageOSSummaryDtos = await GetImageOSSummaryDtos(cachedValues),
            ImageEOSLByNsSummaryDtos = await GetImageEOSLByNsSummaryDtos(cachedValues),
            ImageEOSLSummaryDtos = await GetImageEOSLSummaryDtos(cachedValues),
        };

        return vulnerabilityReportSummaryDto;
    }

    private static Task<IEnumerable<VRSeveritiesByNsSummaryDto>> GetSeveritiesByNsSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<VRSeveritiesByNsSummaryDto> vulnerabilityReportSummaryDtos;
        IEnumerable<VRSeveritiesByNsSummaryDetailDto> detailDtos;
        VRSeveritiesByNsSummaryDto vulnerabilityReportSummaryDto;
        int[] severityIds = [.. Enum.GetValues<TrivySeverity>().Cast<int>()];
        vulnerabilityReportSummaryDtos = cachedValues
            .SelectMany(vr => (vr.Report?.Vulnerabilities ?? []).Select(
                vrd => new
                {
                    vr.Metadata.NamespaceProperty,
                    vrd.Severity,
                    vrd.VulnerabilityId,
                    isFixable = !string.IsNullOrWhiteSpace(vrd.FixedVersion),
                }))
            .GroupBy(item => new { item.NamespaceProperty, item.Severity })
            .Select(group => new
            {
                namespaceName = group.Key.NamespaceProperty,
                trivySeverityId = group.Key.Severity,
                totalCount = group.Count(),
                distinctCount = group.Select(item => item.VulnerabilityId).Distinct().Count(),
                fixableTotalCount = group.Where(item => item.isFixable).Count(),
                fixableDistinctCount =
                    group.Where(item => item.isFixable).Select(item => item.VulnerabilityId).Distinct().Count(),
            })
            .GroupBy(x => x.namespaceName)
            .SelectMany(g => severityIds.Select(
                SeverityId => new
                {
                    NamespaceName = g.Key,
                    SeverityId,
                    TotalCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.totalCount ?? 0,
                    DistinctCount = g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.distinctCount ?? 0,
                    FixableTotalCount =
                        g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.fixableTotalCount ?? 0,
                    FixableDistinctCount =
                        g.FirstOrDefault(x => (int)x.trivySeverityId == SeverityId)?.fixableDistinctCount ?? 0,
                }))
            .GroupBy(last => last.NamespaceName)
            .Select(summaryGroup =>
            {
                VRSeveritiesByNsSummaryDto vrsns = new()
                {
                    Uid = Guid.NewGuid(),
                    NamespaceName = summaryGroup.Key,
                    Details = summaryGroup.Select(
                            detail =>
                            {
                                VRSeveritiesByNsSummaryDetailDto detailDto = new()
                                {
                                    Id = detail.SeverityId,
                                    TotalCount = detail.TotalCount,
                                    DistinctCount = detail.DistinctCount,
                                    FixableTotalCount = detail.FixableTotalCount,
                                    FixableDistinctCount = detail.FixableDistinctCount,
                                };
                                return detailDto;
                            })
                        .ToList(),
                    IsTotal = false,
                };
                return vrsns;
            });
        IEnumerable<VRSeveritiesByNsSummaryDetailDto> totalSummary = cachedValues
            .SelectMany(vr => (vr.Report?.Vulnerabilities ?? []).Select(vrd => new
                {
                    vrd.Severity,
                    vrd.VulnerabilityId,
                    isFixable = !string.IsNullOrWhiteSpace(vrd.FixedVersion),
                }))
            .GroupBy(item => item.Severity)
            .Select(group => new VRSeveritiesByNsSummaryDetailDto
            {
                Id = (int)group.Key,
                TotalCount = group.Count(),
                DistinctCount = group.Select(item => item.VulnerabilityId).Distinct().Count(),
                FixableTotalCount = group.Where(item => item.isFixable).Count(),
                FixableDistinctCount = group.Where(item => item.isFixable)
                    .Select(item => item.VulnerabilityId)
                    .Distinct()
                    .Count(),
            });
        detailDtos = totalSummary.Concat(
            severityIds.Where(id => !totalSummary.Any(x => x.Id == id))
               .Select(id => new VRSeveritiesByNsSummaryDetailDto
                {
                    Id = id,
                    TotalCount = 0,
                    DistinctCount = 0,
                    FixableTotalCount = 0,
                    FixableDistinctCount = 0,
                }));
        vulnerabilityReportSummaryDto = new VRSeveritiesByNsSummaryDto
        {
            Uid = Guid.NewGuid(), NamespaceName = string.Empty, Details = detailDtos, IsTotal = true,
        };
        vulnerabilityReportSummaryDtos = vulnerabilityReportSummaryDtos.Concat([vulnerabilityReportSummaryDto]);

        return Task.FromResult(vulnerabilityReportSummaryDtos);
    }

    private static Task<IEnumerable<GenericByNsSummaryDto>> GetImagesByNSSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<GenericByNsSummaryDto> imagesByNSSummaryDtos = cachedValues
            .Select(vr => new { NamespaceProperty = vr.Namespace(), Digest = vr.Report?.Artifact?.Digest ?? string.Empty })
            .GroupBy(item => item.NamespaceProperty)
            .Select(group =>
            {
                GenericByNsSummaryDto dto = new()
                {
                    NamespaceName = group.Key, TotalCount = group.Count(), DistinctCount = group.Distinct().Count(),
                };
                return dto;
            });
        IEnumerable<string> globalStatistics = cachedValues.Select(vr => vr.Report?.Artifact?.Digest ?? string.Empty);
        GenericByNsSummaryDto totalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Distinct().Count(),
            IsTotal = true,
        };
        imagesByNSSummaryDtos = imagesByNSSummaryDtos.Concat([totalDto]);

        return Task.FromResult(imagesByNSSummaryDtos);
    }

    private static Task<IEnumerable<GenericSummaryDto>> GetImageSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<GenericSummaryDto> imageSummaryDtos = cachedValues
            .GroupBy(item => item.Report?.Artifact?.Digest ?? string.Empty)
            .Select(
                group =>
                {
                    string imageRegistry = group.FirstOrDefault()?.Report?.Registry?.Server ?? string.Empty;
                    string imageName = group.FirstOrDefault()?.Report?.Artifact?.Repository ?? string.Empty;
                    string imageTag = group.FirstOrDefault()?.Report?.Artifact?.Tag ?? string.Empty;
                    GenericSummaryDto dto = new()
                    {
                        Name = $"{imageRegistry}/{imageName}:{imageTag}",
                        Count = group.Count(),
                    };
                    return dto;
                });

        return Task.FromResult(imageSummaryDtos);
    }

    private static Task<IEnumerable<GenericByNsSummaryDto>> GetImageOSByNSSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<GenericByNsSummaryDto> vRImageOSesByNSSummaryDtos = cachedValues
            .Select(vr => new
            {
                NamespaceProperty = vr.Namespace(),
                OsName = vr.Report?.Os?.Name ?? string.Empty,
                Os = vr.Report?.Os?.Family ?? string.Empty,
            })
            .GroupBy(item => item.NamespaceProperty)
            .Select(group =>
            {
                GenericByNsSummaryDto dto = new()
                {
                    NamespaceName = group.Key,
                    TotalCount = group.Count(),
                    DistinctCount = group.Select(item => item.OsName + item.Os).Distinct().Count(),
                    IsTotal = false,
                };
                return dto;
            });
        var globalStatistics = cachedValues
            .Select(vr => new
            {
                OsName = vr.Report?.Os?.Name ?? string.Empty, Os = vr.Report?.Os?.Family ?? string.Empty,
            })
            .ToArray();
        GenericByNsSummaryDto globalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Select(item => item.OsName + item.Os).Distinct().Count(),
            IsTotal = true,
        };
        vRImageOSesByNSSummaryDtos = vRImageOSesByNSSummaryDtos.Concat([globalDto]);

        return Task.FromResult(vRImageOSesByNSSummaryDtos);
    }

    private static Task<IEnumerable<GenericSummaryDto>> GetImageOSSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<GenericSummaryDto> imageOSSummaryDtos = cachedValues
            .Select(vr => $"{vr.Report?.Os?.Family ?? string.Empty} - {vr.Report?.Os?.Name ?? string.Empty}")
            .GroupBy(image => image)
            .Select(group =>
            {
                GenericSummaryDto dto = new() { Name = group.Key, Count = group.Count() };
                return dto;
            });

        return Task.FromResult(imageOSSummaryDtos);
    }

    private static Task<IEnumerable<GenericByNsSummaryDto>> GetImageEOSLByNsSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<GenericByNsSummaryDto> imageEOSLByNsSummaryDtos = cachedValues
            .Where(vr => vr.Report?.Os?.Eosl ?? false)
            .Select(vr => new
            {
                NamespaceName = vr.Namespace(),
                OsFullName = GetImageOSFullName(vr),
            })
            .GroupBy(item => item.NamespaceName)
            .Select(group =>
            {
                GenericByNsSummaryDto dto = new()
                {
                    NamespaceName = group.Key,
                    TotalCount = group.Count(),
                    DistinctCount = group.Select(item => item).Distinct().Count(),
                    IsTotal = false,
                };
                return dto;
            });
        var globalStatistics = cachedValues
            .Where(vr => vr.Report?.Os?.Eosl ?? false)
            .Select(vr => new
            {
                NamespaceName = vr.Namespace(),
                OsFullName = GetImageOSFullName(vr),
            })
            .ToArray();
        GenericByNsSummaryDto globalDto = new()
        {
            NamespaceName = string.Empty,
            TotalCount = globalStatistics.Count(),
            DistinctCount = globalStatistics.Select(x => x.OsFullName).Distinct().Count(),
            IsTotal = true,
        };
        imageEOSLByNsSummaryDtos = imageEOSLByNsSummaryDtos.Concat([globalDto]);

        return Task.FromResult(imageEOSLByNsSummaryDtos);
    }

    private static Task<IEnumerable<GenericSummaryDto>> GetImageEOSLSummaryDtos(IEnumerable<VulnerabilityReportCr> cachedValues)
    {
        IEnumerable<GenericSummaryDto> imageEOSLSummaryDtos = cachedValues
            .Where(vr => vr.Report?.Os?.Eosl ?? false)
            .Select(vr => GetImageOSFullName(vr))
            .GroupBy(item => item)
            .Select(
                group =>
                {
                    GenericSummaryDto dto = new() { Name = group.Key, Count = group.Count() };
                    return dto;
                });

        return Task.FromResult(imageEOSLSummaryDtos);
    }

    private static string GetImageOSFullName(VulnerabilityReportCr vr)
    {
        return $"{vr.Report?.Os?.Family ?? string.Empty} - {vr.Report?.Os?.Name ?? string.Empty}";
    }
}
